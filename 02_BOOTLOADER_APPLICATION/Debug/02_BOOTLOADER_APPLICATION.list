
02_BOOTLOADER_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  08008190  08008190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800bd04  0800bd04  0000bd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c064  0800c064  0001007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c064  0800c064  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c06c  0800c06c  0001007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c06c  0800c06c  0000c06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c070  0800c070  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800c074  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001007c  2**0
                  CONTENTS
 10 .bss          000001f8  2000007c  2000007c  0001007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  0001007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2b0  00000000  00000000  000100ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002019  00000000  00000000  0001c35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0001e378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  0001ec10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000206cb  00000000  00000000  0001f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a793  00000000  00000000  0003fabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2b76  00000000  00000000  0004a24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010cdc4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002548  00000000  00000000  0010ce18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	; (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	2000007c 	.word	0x2000007c
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800bcec 	.word	0x0800bcec

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	; (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000080 	.word	0x20000080
 80081cc:	0800bcec 	.word	0x0800bcec

080081d0 <strlen>:
 80081d0:	4603      	mov	r3, r0
 80081d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	d1fb      	bne.n	80081d2 <strlen+0x2>
 80081da:	1a18      	subs	r0, r3, r0
 80081dc:	3801      	subs	r0, #1
 80081de:	4770      	bx	lr

080081e0 <memchr>:
 80081e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081e4:	2a10      	cmp	r2, #16
 80081e6:	db2b      	blt.n	8008240 <memchr+0x60>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	d008      	beq.n	8008200 <memchr+0x20>
 80081ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d02d      	beq.n	8008254 <memchr+0x74>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	b342      	cbz	r2, 8008250 <memchr+0x70>
 80081fe:	d1f6      	bne.n	80081ee <memchr+0xe>
 8008200:	b4f0      	push	{r4, r5, r6, r7}
 8008202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800820a:	f022 0407 	bic.w	r4, r2, #7
 800820e:	f07f 0700 	mvns.w	r7, #0
 8008212:	2300      	movs	r3, #0
 8008214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008218:	3c08      	subs	r4, #8
 800821a:	ea85 0501 	eor.w	r5, r5, r1
 800821e:	ea86 0601 	eor.w	r6, r6, r1
 8008222:	fa85 f547 	uadd8	r5, r5, r7
 8008226:	faa3 f587 	sel	r5, r3, r7
 800822a:	fa86 f647 	uadd8	r6, r6, r7
 800822e:	faa5 f687 	sel	r6, r5, r7
 8008232:	b98e      	cbnz	r6, 8008258 <memchr+0x78>
 8008234:	d1ee      	bne.n	8008214 <memchr+0x34>
 8008236:	bcf0      	pop	{r4, r5, r6, r7}
 8008238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800823c:	f002 0207 	and.w	r2, r2, #7
 8008240:	b132      	cbz	r2, 8008250 <memchr+0x70>
 8008242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008246:	3a01      	subs	r2, #1
 8008248:	ea83 0301 	eor.w	r3, r3, r1
 800824c:	b113      	cbz	r3, 8008254 <memchr+0x74>
 800824e:	d1f8      	bne.n	8008242 <memchr+0x62>
 8008250:	2000      	movs	r0, #0
 8008252:	4770      	bx	lr
 8008254:	3801      	subs	r0, #1
 8008256:	4770      	bx	lr
 8008258:	2d00      	cmp	r5, #0
 800825a:	bf06      	itte	eq
 800825c:	4635      	moveq	r5, r6
 800825e:	3803      	subeq	r0, #3
 8008260:	3807      	subne	r0, #7
 8008262:	f015 0f01 	tst.w	r5, #1
 8008266:	d107      	bne.n	8008278 <memchr+0x98>
 8008268:	3001      	adds	r0, #1
 800826a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800826e:	bf02      	ittt	eq
 8008270:	3001      	addeq	r0, #1
 8008272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008276:	3001      	addeq	r0, #1
 8008278:	bcf0      	pop	{r4, r5, r6, r7}
 800827a:	3801      	subs	r0, #1
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <__aeabi_uldivmod>:
 8008280:	b953      	cbnz	r3, 8008298 <__aeabi_uldivmod+0x18>
 8008282:	b94a      	cbnz	r2, 8008298 <__aeabi_uldivmod+0x18>
 8008284:	2900      	cmp	r1, #0
 8008286:	bf08      	it	eq
 8008288:	2800      	cmpeq	r0, #0
 800828a:	bf1c      	itt	ne
 800828c:	f04f 31ff 	movne.w	r1, #4294967295
 8008290:	f04f 30ff 	movne.w	r0, #4294967295
 8008294:	f000 b96e 	b.w	8008574 <__aeabi_idiv0>
 8008298:	f1ad 0c08 	sub.w	ip, sp, #8
 800829c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082a0:	f000 f806 	bl	80082b0 <__udivmoddi4>
 80082a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ac:	b004      	add	sp, #16
 80082ae:	4770      	bx	lr

080082b0 <__udivmoddi4>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	9d08      	ldr	r5, [sp, #32]
 80082b6:	4604      	mov	r4, r0
 80082b8:	468c      	mov	ip, r1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f040 8083 	bne.w	80083c6 <__udivmoddi4+0x116>
 80082c0:	428a      	cmp	r2, r1
 80082c2:	4617      	mov	r7, r2
 80082c4:	d947      	bls.n	8008356 <__udivmoddi4+0xa6>
 80082c6:	fab2 f282 	clz	r2, r2
 80082ca:	b142      	cbz	r2, 80082de <__udivmoddi4+0x2e>
 80082cc:	f1c2 0020 	rsb	r0, r2, #32
 80082d0:	fa24 f000 	lsr.w	r0, r4, r0
 80082d4:	4091      	lsls	r1, r2
 80082d6:	4097      	lsls	r7, r2
 80082d8:	ea40 0c01 	orr.w	ip, r0, r1
 80082dc:	4094      	lsls	r4, r2
 80082de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80082e2:	0c23      	lsrs	r3, r4, #16
 80082e4:	fbbc f6f8 	udiv	r6, ip, r8
 80082e8:	fa1f fe87 	uxth.w	lr, r7
 80082ec:	fb08 c116 	mls	r1, r8, r6, ip
 80082f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80082f4:	fb06 f10e 	mul.w	r1, r6, lr
 80082f8:	4299      	cmp	r1, r3
 80082fa:	d909      	bls.n	8008310 <__udivmoddi4+0x60>
 80082fc:	18fb      	adds	r3, r7, r3
 80082fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8008302:	f080 8119 	bcs.w	8008538 <__udivmoddi4+0x288>
 8008306:	4299      	cmp	r1, r3
 8008308:	f240 8116 	bls.w	8008538 <__udivmoddi4+0x288>
 800830c:	3e02      	subs	r6, #2
 800830e:	443b      	add	r3, r7
 8008310:	1a5b      	subs	r3, r3, r1
 8008312:	b2a4      	uxth	r4, r4
 8008314:	fbb3 f0f8 	udiv	r0, r3, r8
 8008318:	fb08 3310 	mls	r3, r8, r0, r3
 800831c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008320:	fb00 fe0e 	mul.w	lr, r0, lr
 8008324:	45a6      	cmp	lr, r4
 8008326:	d909      	bls.n	800833c <__udivmoddi4+0x8c>
 8008328:	193c      	adds	r4, r7, r4
 800832a:	f100 33ff 	add.w	r3, r0, #4294967295
 800832e:	f080 8105 	bcs.w	800853c <__udivmoddi4+0x28c>
 8008332:	45a6      	cmp	lr, r4
 8008334:	f240 8102 	bls.w	800853c <__udivmoddi4+0x28c>
 8008338:	3802      	subs	r0, #2
 800833a:	443c      	add	r4, r7
 800833c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008340:	eba4 040e 	sub.w	r4, r4, lr
 8008344:	2600      	movs	r6, #0
 8008346:	b11d      	cbz	r5, 8008350 <__udivmoddi4+0xa0>
 8008348:	40d4      	lsrs	r4, r2
 800834a:	2300      	movs	r3, #0
 800834c:	e9c5 4300 	strd	r4, r3, [r5]
 8008350:	4631      	mov	r1, r6
 8008352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008356:	b902      	cbnz	r2, 800835a <__udivmoddi4+0xaa>
 8008358:	deff      	udf	#255	; 0xff
 800835a:	fab2 f282 	clz	r2, r2
 800835e:	2a00      	cmp	r2, #0
 8008360:	d150      	bne.n	8008404 <__udivmoddi4+0x154>
 8008362:	1bcb      	subs	r3, r1, r7
 8008364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008368:	fa1f f887 	uxth.w	r8, r7
 800836c:	2601      	movs	r6, #1
 800836e:	fbb3 fcfe 	udiv	ip, r3, lr
 8008372:	0c21      	lsrs	r1, r4, #16
 8008374:	fb0e 331c 	mls	r3, lr, ip, r3
 8008378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800837c:	fb08 f30c 	mul.w	r3, r8, ip
 8008380:	428b      	cmp	r3, r1
 8008382:	d907      	bls.n	8008394 <__udivmoddi4+0xe4>
 8008384:	1879      	adds	r1, r7, r1
 8008386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800838a:	d202      	bcs.n	8008392 <__udivmoddi4+0xe2>
 800838c:	428b      	cmp	r3, r1
 800838e:	f200 80e9 	bhi.w	8008564 <__udivmoddi4+0x2b4>
 8008392:	4684      	mov	ip, r0
 8008394:	1ac9      	subs	r1, r1, r3
 8008396:	b2a3      	uxth	r3, r4
 8008398:	fbb1 f0fe 	udiv	r0, r1, lr
 800839c:	fb0e 1110 	mls	r1, lr, r0, r1
 80083a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80083a4:	fb08 f800 	mul.w	r8, r8, r0
 80083a8:	45a0      	cmp	r8, r4
 80083aa:	d907      	bls.n	80083bc <__udivmoddi4+0x10c>
 80083ac:	193c      	adds	r4, r7, r4
 80083ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80083b2:	d202      	bcs.n	80083ba <__udivmoddi4+0x10a>
 80083b4:	45a0      	cmp	r8, r4
 80083b6:	f200 80d9 	bhi.w	800856c <__udivmoddi4+0x2bc>
 80083ba:	4618      	mov	r0, r3
 80083bc:	eba4 0408 	sub.w	r4, r4, r8
 80083c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80083c4:	e7bf      	b.n	8008346 <__udivmoddi4+0x96>
 80083c6:	428b      	cmp	r3, r1
 80083c8:	d909      	bls.n	80083de <__udivmoddi4+0x12e>
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	f000 80b1 	beq.w	8008532 <__udivmoddi4+0x282>
 80083d0:	2600      	movs	r6, #0
 80083d2:	e9c5 0100 	strd	r0, r1, [r5]
 80083d6:	4630      	mov	r0, r6
 80083d8:	4631      	mov	r1, r6
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	fab3 f683 	clz	r6, r3
 80083e2:	2e00      	cmp	r6, #0
 80083e4:	d14a      	bne.n	800847c <__udivmoddi4+0x1cc>
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d302      	bcc.n	80083f0 <__udivmoddi4+0x140>
 80083ea:	4282      	cmp	r2, r0
 80083ec:	f200 80b8 	bhi.w	8008560 <__udivmoddi4+0x2b0>
 80083f0:	1a84      	subs	r4, r0, r2
 80083f2:	eb61 0103 	sbc.w	r1, r1, r3
 80083f6:	2001      	movs	r0, #1
 80083f8:	468c      	mov	ip, r1
 80083fa:	2d00      	cmp	r5, #0
 80083fc:	d0a8      	beq.n	8008350 <__udivmoddi4+0xa0>
 80083fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8008402:	e7a5      	b.n	8008350 <__udivmoddi4+0xa0>
 8008404:	f1c2 0320 	rsb	r3, r2, #32
 8008408:	fa20 f603 	lsr.w	r6, r0, r3
 800840c:	4097      	lsls	r7, r2
 800840e:	fa01 f002 	lsl.w	r0, r1, r2
 8008412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008416:	40d9      	lsrs	r1, r3
 8008418:	4330      	orrs	r0, r6
 800841a:	0c03      	lsrs	r3, r0, #16
 800841c:	fbb1 f6fe 	udiv	r6, r1, lr
 8008420:	fa1f f887 	uxth.w	r8, r7
 8008424:	fb0e 1116 	mls	r1, lr, r6, r1
 8008428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800842c:	fb06 f108 	mul.w	r1, r6, r8
 8008430:	4299      	cmp	r1, r3
 8008432:	fa04 f402 	lsl.w	r4, r4, r2
 8008436:	d909      	bls.n	800844c <__udivmoddi4+0x19c>
 8008438:	18fb      	adds	r3, r7, r3
 800843a:	f106 3cff 	add.w	ip, r6, #4294967295
 800843e:	f080 808d 	bcs.w	800855c <__udivmoddi4+0x2ac>
 8008442:	4299      	cmp	r1, r3
 8008444:	f240 808a 	bls.w	800855c <__udivmoddi4+0x2ac>
 8008448:	3e02      	subs	r6, #2
 800844a:	443b      	add	r3, r7
 800844c:	1a5b      	subs	r3, r3, r1
 800844e:	b281      	uxth	r1, r0
 8008450:	fbb3 f0fe 	udiv	r0, r3, lr
 8008454:	fb0e 3310 	mls	r3, lr, r0, r3
 8008458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800845c:	fb00 f308 	mul.w	r3, r0, r8
 8008460:	428b      	cmp	r3, r1
 8008462:	d907      	bls.n	8008474 <__udivmoddi4+0x1c4>
 8008464:	1879      	adds	r1, r7, r1
 8008466:	f100 3cff 	add.w	ip, r0, #4294967295
 800846a:	d273      	bcs.n	8008554 <__udivmoddi4+0x2a4>
 800846c:	428b      	cmp	r3, r1
 800846e:	d971      	bls.n	8008554 <__udivmoddi4+0x2a4>
 8008470:	3802      	subs	r0, #2
 8008472:	4439      	add	r1, r7
 8008474:	1acb      	subs	r3, r1, r3
 8008476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800847a:	e778      	b.n	800836e <__udivmoddi4+0xbe>
 800847c:	f1c6 0c20 	rsb	ip, r6, #32
 8008480:	fa03 f406 	lsl.w	r4, r3, r6
 8008484:	fa22 f30c 	lsr.w	r3, r2, ip
 8008488:	431c      	orrs	r4, r3
 800848a:	fa20 f70c 	lsr.w	r7, r0, ip
 800848e:	fa01 f306 	lsl.w	r3, r1, r6
 8008492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8008496:	fa21 f10c 	lsr.w	r1, r1, ip
 800849a:	431f      	orrs	r7, r3
 800849c:	0c3b      	lsrs	r3, r7, #16
 800849e:	fbb1 f9fe 	udiv	r9, r1, lr
 80084a2:	fa1f f884 	uxth.w	r8, r4
 80084a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80084aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80084ae:	fb09 fa08 	mul.w	sl, r9, r8
 80084b2:	458a      	cmp	sl, r1
 80084b4:	fa02 f206 	lsl.w	r2, r2, r6
 80084b8:	fa00 f306 	lsl.w	r3, r0, r6
 80084bc:	d908      	bls.n	80084d0 <__udivmoddi4+0x220>
 80084be:	1861      	adds	r1, r4, r1
 80084c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80084c4:	d248      	bcs.n	8008558 <__udivmoddi4+0x2a8>
 80084c6:	458a      	cmp	sl, r1
 80084c8:	d946      	bls.n	8008558 <__udivmoddi4+0x2a8>
 80084ca:	f1a9 0902 	sub.w	r9, r9, #2
 80084ce:	4421      	add	r1, r4
 80084d0:	eba1 010a 	sub.w	r1, r1, sl
 80084d4:	b2bf      	uxth	r7, r7
 80084d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80084da:	fb0e 1110 	mls	r1, lr, r0, r1
 80084de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80084e2:	fb00 f808 	mul.w	r8, r0, r8
 80084e6:	45b8      	cmp	r8, r7
 80084e8:	d907      	bls.n	80084fa <__udivmoddi4+0x24a>
 80084ea:	19e7      	adds	r7, r4, r7
 80084ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80084f0:	d22e      	bcs.n	8008550 <__udivmoddi4+0x2a0>
 80084f2:	45b8      	cmp	r8, r7
 80084f4:	d92c      	bls.n	8008550 <__udivmoddi4+0x2a0>
 80084f6:	3802      	subs	r0, #2
 80084f8:	4427      	add	r7, r4
 80084fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80084fe:	eba7 0708 	sub.w	r7, r7, r8
 8008502:	fba0 8902 	umull	r8, r9, r0, r2
 8008506:	454f      	cmp	r7, r9
 8008508:	46c6      	mov	lr, r8
 800850a:	4649      	mov	r1, r9
 800850c:	d31a      	bcc.n	8008544 <__udivmoddi4+0x294>
 800850e:	d017      	beq.n	8008540 <__udivmoddi4+0x290>
 8008510:	b15d      	cbz	r5, 800852a <__udivmoddi4+0x27a>
 8008512:	ebb3 020e 	subs.w	r2, r3, lr
 8008516:	eb67 0701 	sbc.w	r7, r7, r1
 800851a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800851e:	40f2      	lsrs	r2, r6
 8008520:	ea4c 0202 	orr.w	r2, ip, r2
 8008524:	40f7      	lsrs	r7, r6
 8008526:	e9c5 2700 	strd	r2, r7, [r5]
 800852a:	2600      	movs	r6, #0
 800852c:	4631      	mov	r1, r6
 800852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008532:	462e      	mov	r6, r5
 8008534:	4628      	mov	r0, r5
 8008536:	e70b      	b.n	8008350 <__udivmoddi4+0xa0>
 8008538:	4606      	mov	r6, r0
 800853a:	e6e9      	b.n	8008310 <__udivmoddi4+0x60>
 800853c:	4618      	mov	r0, r3
 800853e:	e6fd      	b.n	800833c <__udivmoddi4+0x8c>
 8008540:	4543      	cmp	r3, r8
 8008542:	d2e5      	bcs.n	8008510 <__udivmoddi4+0x260>
 8008544:	ebb8 0e02 	subs.w	lr, r8, r2
 8008548:	eb69 0104 	sbc.w	r1, r9, r4
 800854c:	3801      	subs	r0, #1
 800854e:	e7df      	b.n	8008510 <__udivmoddi4+0x260>
 8008550:	4608      	mov	r0, r1
 8008552:	e7d2      	b.n	80084fa <__udivmoddi4+0x24a>
 8008554:	4660      	mov	r0, ip
 8008556:	e78d      	b.n	8008474 <__udivmoddi4+0x1c4>
 8008558:	4681      	mov	r9, r0
 800855a:	e7b9      	b.n	80084d0 <__udivmoddi4+0x220>
 800855c:	4666      	mov	r6, ip
 800855e:	e775      	b.n	800844c <__udivmoddi4+0x19c>
 8008560:	4630      	mov	r0, r6
 8008562:	e74a      	b.n	80083fa <__udivmoddi4+0x14a>
 8008564:	f1ac 0c02 	sub.w	ip, ip, #2
 8008568:	4439      	add	r1, r7
 800856a:	e713      	b.n	8008394 <__udivmoddi4+0xe4>
 800856c:	3802      	subs	r0, #2
 800856e:	443c      	add	r4, r7
 8008570:	e724      	b.n	80083bc <__udivmoddi4+0x10c>
 8008572:	bf00      	nop

08008574 <__aeabi_idiv0>:
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop

08008578 <bootloader_get_ver_cmd>:
extern uint8_t supported_command[];

uint8_t get_flash_rdp_levell(void);

void bootloader_get_ver_cmd(uint8_t *bl_rx_data)
 {
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]

	uint8_t bl_version;
	printMessage("BL_GET_VER_CMD is run\n");
 8008580:	4814      	ldr	r0, [pc, #80]	; (80085d4 <bootloader_get_ver_cmd+0x5c>)
 8008582:	f000 fc5f 	bl	8008e44 <printMessage>

	uint32_t command_packet_lenght=1+bl_rx_data[0];
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	60fb      	str	r3, [r7, #12]

	uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008594:	3b04      	subs	r3, #4
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	4413      	add	r3, r2
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60bb      	str	r3, [r7, #8]
	//crc control
	if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc)){
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3b04      	subs	r3, #4
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4619      	mov	r1, r3
 80085ae:	f000 fbc9 	bl	8008d44 <bootloader_verifiy_crc>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d006      	beq.n	80085c6 <bootloader_get_ver_cmd+0x4e>
		printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 80085b8:	4807      	ldr	r0, [pc, #28]	; (80085d8 <bootloader_get_ver_cmd+0x60>)
 80085ba:	f000 fc43 	bl	8008e44 <printMessage>
	    bootloader_send_ack(1);
 80085be:	2001      	movs	r0, #1
 80085c0:	f000 fbf2 	bl	8008da8 <bootloader_send_ack>
	}else{

		bootloader_send_nack();
	}

}
 80085c4:	e001      	b.n	80085ca <bootloader_get_ver_cmd+0x52>
		bootloader_send_nack();
 80085c6:	f000 fc07 	bl	8008dd8 <bootloader_send_nack>
}
 80085ca:	bf00      	nop
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	0800bd04 	.word	0x0800bd04
 80085d8:	0800bd1c 	.word	0x0800bd1c

080085dc <bootloader_get_help>:
void bootloader_get_help(uint8_t *bl_rx_data){
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]

	printMessage("BL_GET_HELP is run\n");
 80085e4:	481b      	ldr	r0, [pc, #108]	; (8008654 <bootloader_get_help+0x78>)
 80085e6:	f000 fc2d 	bl	8008e44 <printMessage>

	uint32_t command_packet_lenght=bl_rx_data[0]+1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	3301      	adds	r3, #1
 80085f0:	60fb      	str	r3, [r7, #12]

	uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085f8:	3b04      	subs	r3, #4
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	4413      	add	r3, r2
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60bb      	str	r3, [r7, #8]

	//crc control

	if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc)){
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	4618      	mov	r0, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3b04      	subs	r3, #4
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	4619      	mov	r1, r3
 8008612:	f000 fb97 	bl	8008d44 <bootloader_verifiy_crc>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d014      	beq.n	8008646 <bootloader_get_help+0x6a>
		printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 800861c:	480e      	ldr	r0, [pc, #56]	; (8008658 <bootloader_get_help+0x7c>)
 800861e:	f000 fc11 	bl	8008e44 <printMessage>
	    bootloader_send_ack( strlen(supported_command));
 8008622:	480e      	ldr	r0, [pc, #56]	; (800865c <bootloader_get_help+0x80>)
 8008624:	f7ff fdd4 	bl	80081d0 <strlen>
 8008628:	4603      	mov	r3, r0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fbbb 	bl	8008da8 <bootloader_send_ack>
		bootloader_uart_write_data(supported_command, strlen(supported_command));
 8008632:	480a      	ldr	r0, [pc, #40]	; (800865c <bootloader_get_help+0x80>)
 8008634:	f7ff fdcc 	bl	80081d0 <strlen>
 8008638:	4603      	mov	r3, r0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	4619      	mov	r1, r3
 800863e:	4807      	ldr	r0, [pc, #28]	; (800865c <bootloader_get_help+0x80>)
 8008640:	f000 fbdc 	bl	8008dfc <bootloader_uart_write_data>

	}else{

		bootloader_send_nack();
	}
}
 8008644:	e001      	b.n	800864a <bootloader_get_help+0x6e>
		bootloader_send_nack();
 8008646:	f000 fbc7 	bl	8008dd8 <bootloader_send_nack>
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	0800bd40 	.word	0x0800bd40
 8008658:	0800bd1c 	.word	0x0800bd1c
 800865c:	20000000 	.word	0x20000000

08008660 <bootloader_get_cid>:
void bootloader_get_cid(uint8_t *bl_rx_data){
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

	uint16_t cID=0;
 8008668:	2300      	movs	r3, #0
 800866a:	82fb      	strh	r3, [r7, #22]

	printMessage("BL_GET_CID is run\n");
 800866c:	481e      	ldr	r0, [pc, #120]	; (80086e8 <bootloader_get_cid+0x88>)
 800866e:	f000 fbe9 	bl	8008e44 <printMessage>
	uint32_t command_packet_lenght=bl_rx_data[0]+1;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	3301      	adds	r3, #1
 8008678:	613b      	str	r3, [r7, #16]
	uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008680:	3b04      	subs	r3, #4
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	4413      	add	r3, r2
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
	//crc control
	if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc)){
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	4618      	mov	r0, r3
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	3b04      	subs	r3, #4
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	4619      	mov	r1, r3
 800869a:	f000 fb53 	bl	8008d44 <bootloader_verifiy_crc>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01b      	beq.n	80086dc <bootloader_get_cid+0x7c>
		printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 80086a4:	4811      	ldr	r0, [pc, #68]	; (80086ec <bootloader_get_cid+0x8c>)
 80086a6:	f000 fbcd 	bl	8008e44 <printMessage>
	    bootloader_send_ack(strlen(2));
 80086aa:	2002      	movs	r0, #2
 80086ac:	f7ff fd90 	bl	80081d0 <strlen>
 80086b0:	4603      	mov	r3, r0
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fb77 	bl	8008da8 <bootloader_send_ack>
	    cID= (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 80086ba:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <bootloader_get_cid+0x90>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086c4:	82fb      	strh	r3, [r7, #22]
	    printMessage("BL_DEBUG_MESSAGE CHIP ID : %d",cID);
 80086c6:	8afb      	ldrh	r3, [r7, #22]
 80086c8:	4619      	mov	r1, r3
 80086ca:	480a      	ldr	r0, [pc, #40]	; (80086f4 <bootloader_get_cid+0x94>)
 80086cc:	f000 fbba 	bl	8008e44 <printMessage>
	    bootloader_uart_write_data((uint8_t*)cID, 2);
 80086d0:	8afb      	ldrh	r3, [r7, #22]
 80086d2:	2102      	movs	r1, #2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fb91 	bl	8008dfc <bootloader_uart_write_data>

	}else{

		bootloader_send_nack();
	}
}
 80086da:	e001      	b.n	80086e0 <bootloader_get_cid+0x80>
		bootloader_send_nack();
 80086dc:	f000 fb7c 	bl	8008dd8 <bootloader_send_nack>
}
 80086e0:	bf00      	nop
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	0800bd54 	.word	0x0800bd54
 80086ec:	0800bd1c 	.word	0x0800bd1c
 80086f0:	e0042000 	.word	0xe0042000
 80086f4:	0800bd68 	.word	0x0800bd68

080086f8 <bootloader_get_rdp_cmd>:

void bootloader_get_rdp_cmd(uint8_t *bl_rx_data){
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]

	printMessage("BL_GET_RDP is run\n");
 8008700:	481c      	ldr	r0, [pc, #112]	; (8008774 <bootloader_get_rdp_cmd+0x7c>)
 8008702:	f000 fb9f 	bl	8008e44 <printMessage>
	uint8_t rdpLevel=0;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
	uint32_t command_packet_lenght=bl_rx_data[0]+1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	617b      	str	r3, [r7, #20]

		uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008718:	3b04      	subs	r3, #4
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4413      	add	r3, r2
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	613b      	str	r3, [r7, #16]

		//crc control

		if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc)){
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	4618      	mov	r0, r3
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	3b04      	subs	r3, #4
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	4619      	mov	r1, r3
 8008732:	f000 fb07 	bl	8008d44 <bootloader_verifiy_crc>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d015      	beq.n	8008768 <bootloader_get_rdp_cmd+0x70>
			printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 800873c:	480e      	ldr	r0, [pc, #56]	; (8008778 <bootloader_get_rdp_cmd+0x80>)
 800873e:	f000 fb81 	bl	8008e44 <printMessage>
		    bootloader_send_ack(1);
 8008742:	2001      	movs	r0, #1
 8008744:	f000 fb30 	bl	8008da8 <bootloader_send_ack>
		    rdpLevel=get_flash_rdp_levell();
 8008748:	f000 fb6c 	bl	8008e24 <get_flash_rdp_levell>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]
		    printMessage("RDP Level = %d\n",rdpLevel );
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	4619      	mov	r1, r3
 8008754:	4809      	ldr	r0, [pc, #36]	; (800877c <bootloader_get_rdp_cmd+0x84>)
 8008756:	f000 fb75 	bl	8008e44 <printMessage>
		   bootloader_uart_read_data(&rdpLevel,1);
 800875a:	f107 030f 	add.w	r3, r7, #15
 800875e:	2101      	movs	r1, #1
 8008760:	4618      	mov	r0, r3
 8008762:	f000 fb91 	bl	8008e88 <bootloader_uart_read_data>

		}else{

			bootloader_send_nack();
		}
}
 8008766:	e001      	b.n	800876c <bootloader_get_rdp_cmd+0x74>
			bootloader_send_nack();
 8008768:	f000 fb36 	bl	8008dd8 <bootloader_send_nack>
}
 800876c:	bf00      	nop
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	0800bd88 	.word	0x0800bd88
 8008778:	0800bd1c 	.word	0x0800bd1c
 800877c:	0800bd9c 	.word	0x0800bd9c

08008780 <bootloader_go_to_addr>:

void bootloader_go_to_addr(uint8_t *bl_rx_data){
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

	printMessage("BL_GO_TO_ADDRESS is run\n");
 8008788:	482a      	ldr	r0, [pc, #168]	; (8008834 <bootloader_go_to_addr+0xb4>)
 800878a:	f000 fb5b 	bl	8008e44 <printMessage>

	uint32_t go_to_address=0;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
	uint8_t add_invalid= ADDR_INVALID;
 8008792:	2301      	movs	r3, #1
 8008794:	72fb      	strb	r3, [r7, #11]
	uint8_t add_valid= ADDR_VALID;
 8008796:	2300      	movs	r3, #0
 8008798:	76fb      	strb	r3, [r7, #27]

	uint32_t command_packet_lenght=bl_rx_data[0]+1;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	3301      	adds	r3, #1
 80087a0:	617b      	str	r3, [r7, #20]

		uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087a8:	3b04      	subs	r3, #4
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	613b      	str	r3, [r7, #16]

		//crc control

		if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc)){
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	3b04      	subs	r3, #4
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4619      	mov	r1, r3
 80087c2:	f000 fabf 	bl	8008d44 <bootloader_verifiy_crc>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d02c      	beq.n	8008826 <bootloader_go_to_addr+0xa6>
			printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 80087cc:	481a      	ldr	r0, [pc, #104]	; (8008838 <bootloader_go_to_addr+0xb8>)
 80087ce:	f000 fb39 	bl	8008e44 <printMessage>
		    bootloader_send_ack(1);
 80087d2:	2001      	movs	r0, #1
 80087d4:	f000 fae8 	bl	8008da8 <bootloader_send_ack>
		    go_to_address = ((uint32_t*)&bl_rx_data[2]);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3302      	adds	r3, #2
 80087dc:	61fb      	str	r3, [r7, #28]
		    printMessage("GO TO ADDRESS :%d",go_to_address);
 80087de:	69f9      	ldr	r1, [r7, #28]
 80087e0:	4816      	ldr	r0, [pc, #88]	; (800883c <bootloader_go_to_addr+0xbc>)
 80087e2:	f000 fb2f 	bl	8008e44 <printMessage>

		    if(bootloader_verify_address(go_to_address)== ADDR_VALID){
 80087e6:	69f8      	ldr	r0, [r7, #28]
 80087e8:	f000 fa7e 	bl	8008ce8 <bootloader_verify_address>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10f      	bne.n	8008812 <bootloader_go_to_addr+0x92>
		    	bootloader_uart_write_data(add_valid, 1);
 80087f2:	7efb      	ldrb	r3, [r7, #27]
 80087f4:	2101      	movs	r1, #1
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fb00 	bl	8008dfc <bootloader_uart_write_data>
		    	go_to_address+=1; //t bit is 1;
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	3301      	adds	r3, #1
 8008800:	61fb      	str	r3, [r7, #28]

		    	void (*lets_go_to_address)(void)=(void*)go_to_address;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	60fb      	str	r3, [r7, #12]
		    	printMessage("JUMPING GO TO ADDRESS");
 8008806:	480e      	ldr	r0, [pc, #56]	; (8008840 <bootloader_go_to_addr+0xc0>)
 8008808:	f000 fb1c 	bl	8008e44 <printMessage>
		    	lets_go_to_address();
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4798      	blx	r3
		}
		else{
			bootloader_send_nack();
		}

}
 8008810:	e00b      	b.n	800882a <bootloader_go_to_addr+0xaa>
		    	bootloader_uart_write_data(&add_invalid, 1);
 8008812:	f107 030b 	add.w	r3, r7, #11
 8008816:	2101      	movs	r1, #1
 8008818:	4618      	mov	r0, r3
 800881a:	f000 faef 	bl	8008dfc <bootloader_uart_write_data>
		    	printMessage("GO ADDRESS INVALID ERROR");
 800881e:	4809      	ldr	r0, [pc, #36]	; (8008844 <bootloader_go_to_addr+0xc4>)
 8008820:	f000 fb10 	bl	8008e44 <printMessage>
}
 8008824:	e001      	b.n	800882a <bootloader_go_to_addr+0xaa>
			bootloader_send_nack();
 8008826:	f000 fad7 	bl	8008dd8 <bootloader_send_nack>
}
 800882a:	bf00      	nop
 800882c:	3720      	adds	r7, #32
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	0800bdac 	.word	0x0800bdac
 8008838:	0800bd1c 	.word	0x0800bd1c
 800883c:	0800bdc8 	.word	0x0800bdc8
 8008840:	0800bddc 	.word	0x0800bddc
 8008844:	0800bdf4 	.word	0x0800bdf4

08008848 <bootloader_flash_erase>:

void bootloader_flash_erase(uint8_t *bl_rx_data){
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]

	uint8_t eraseStatus = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	75fb      	strb	r3, [r7, #23]

	printMessage("BL_bootloader_flash_erase is run\n");
 8008854:	481c      	ldr	r0, [pc, #112]	; (80088c8 <bootloader_flash_erase+0x80>)
 8008856:	f000 faf5 	bl	8008e44 <printMessage>
	uint32_t command_packet_lenght=bl_rx_data[0]+1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	3301      	adds	r3, #1
 8008860:	613b      	str	r3, [r7, #16]
	uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008868:	3b04      	subs	r3, #4
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	4413      	add	r3, r2
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]
	//crc control
	if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc)){
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	4618      	mov	r0, r3
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	3b04      	subs	r3, #4
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4619      	mov	r1, r3
 8008882:	f000 fa5f 	bl	8008d44 <bootloader_verifiy_crc>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d017      	beq.n	80088bc <bootloader_flash_erase+0x74>

		printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 800888c:	480f      	ldr	r0, [pc, #60]	; (80088cc <bootloader_flash_erase+0x84>)
 800888e:	f000 fad9 	bl	8008e44 <printMessage>
		bootloader_send_ack(1);
 8008892:	2001      	movs	r0, #1
 8008894:	f000 fa88 	bl	8008da8 <bootloader_send_ack>
		eraseStatus=execute_flash_erase(bl_rx_data[2],bl_rx_data[3]);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3302      	adds	r3, #2
 800889c:	781a      	ldrb	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3303      	adds	r3, #3
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f000 f9a0 	bl	8008bec <execute_flash_erase>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]
		printMessage("BL_DEBUG_MESSAGE: Flash erase status %d \n  \n",eraseStatus);
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	4619      	mov	r1, r3
 80088b4:	4806      	ldr	r0, [pc, #24]	; (80088d0 <bootloader_flash_erase+0x88>)
 80088b6:	f000 fac5 	bl	8008e44 <printMessage>

		}else{
		bootloader_send_nack();
		}
}
 80088ba:	e001      	b.n	80088c0 <bootloader_flash_erase+0x78>
		bootloader_send_nack();
 80088bc:	f000 fa8c 	bl	8008dd8 <bootloader_send_nack>
}
 80088c0:	bf00      	nop
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	0800be10 	.word	0x0800be10
 80088cc:	0800bd1c 	.word	0x0800bd1c
 80088d0:	0800be34 	.word	0x0800be34

080088d4 <bootloader_mem_write_cmd>:
void bootloader_mem_write_cmd(uint8_t * bl_rx_data)
 {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
	uint8_t addrValid=0;
 80088dc:	2300      	movs	r3, #0
 80088de:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status=0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]
	uint8_t checkSum=0,lenght=0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	77bb      	strb	r3, [r7, #30]
 80088e8:	2300      	movs	r3, #0
 80088ea:	777b      	strb	r3, [r7, #29]

	lenght=bl_rx_data[0];
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	777b      	strb	r3, [r7, #29]

	uint8_t payloadLenght=bl_rx_data[6];
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	799b      	ldrb	r3, [r3, #6]
 80088f6:	773b      	strb	r3, [r7, #28]

	uint32_t memAddress=*((uint32_t*)(&bl_rx_data[2]));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80088fe:	61bb      	str	r3, [r7, #24]

	checkSum=bl_rx_data[lenght];
 8008900:	7f7b      	ldrb	r3, [r7, #29]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	77bb      	strb	r3, [r7, #30]

	printMessage("BL_memn_write_cmd is run\n");
 800890a:	4828      	ldr	r0, [pc, #160]	; (80089ac <bootloader_mem_write_cmd+0xd8>)
 800890c:	f000 fa9a 	bl	8008e44 <printMessage>

	uint32_t command_packet_lenght=bl_rx_data[0]+1;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	617b      	str	r3, [r7, #20]

	uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800891e:	3b04      	subs	r3, #4
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	4413      	add	r3, r2
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	613b      	str	r3, [r7, #16]

	if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc)){
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3b04      	subs	r3, #4
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	4619      	mov	r1, r3
 8008938:	f000 fa04 	bl	8008d44 <bootloader_verifiy_crc>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d02e      	beq.n	80089a0 <bootloader_mem_write_cmd+0xcc>

		printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 8008942:	481b      	ldr	r0, [pc, #108]	; (80089b0 <bootloader_mem_write_cmd+0xdc>)
 8008944:	f000 fa7e 	bl	8008e44 <printMessage>
		bootloader_send_ack(1);
 8008948:	2001      	movs	r0, #1
 800894a:	f000 fa2d 	bl	8008da8 <bootloader_send_ack>

		printMessage("Memory write address %x \n",memAddress);
 800894e:	69b9      	ldr	r1, [r7, #24]
 8008950:	4818      	ldr	r0, [pc, #96]	; (80089b4 <bootloader_mem_write_cmd+0xe0>)
 8008952:	f000 fa77 	bl	8008e44 <printMessage>

		if(bootloader_verify_address(memAddress)==ADDR_VALID){
 8008956:	69b8      	ldr	r0, [r7, #24]
 8008958:	f000 f9c6 	bl	8008ce8 <bootloader_verify_address>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d114      	bne.n	800898c <bootloader_mem_write_cmd+0xb8>
			printMessage("BL_DEBUG_MSG: VALID MEMEORY ADDRESS");
 8008962:	4815      	ldr	r0, [pc, #84]	; (80089b8 <bootloader_mem_write_cmd+0xe4>)
 8008964:	f000 fa6e 	bl	8008e44 <printMessage>

			write_status=execute_memory_write(bl_rx_data[7],memAddress,payloadLenght);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3307      	adds	r3, #7
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	4618      	mov	r0, r3
 8008970:	7f3b      	ldrb	r3, [r7, #28]
 8008972:	461a      	mov	r2, r3
 8008974:	69b9      	ldr	r1, [r7, #24]
 8008976:	f000 f98c 	bl	8008c92 <execute_memory_write>
 800897a:	4603      	mov	r3, r0
 800897c:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status, 1);
 800897e:	f107 030f 	add.w	r3, r7, #15
 8008982:	2101      	movs	r1, #1
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fa39 	bl	8008dfc <bootloader_uart_write_data>

	}else{
		bootloader_send_nack();
		}

 }
 800898a:	e00b      	b.n	80089a4 <bootloader_mem_write_cmd+0xd0>
			printMessage("BL_DEBUG_MSG: INVALID MEMEORY ADDRESS");
 800898c:	480b      	ldr	r0, [pc, #44]	; (80089bc <bootloader_mem_write_cmd+0xe8>)
 800898e:	f000 fa59 	bl	8008e44 <printMessage>
			bootloader_uart_write_data(&write_status, 1);
 8008992:	f107 030f 	add.w	r3, r7, #15
 8008996:	2101      	movs	r1, #1
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fa2f 	bl	8008dfc <bootloader_uart_write_data>
 }
 800899e:	e001      	b.n	80089a4 <bootloader_mem_write_cmd+0xd0>
		bootloader_send_nack();
 80089a0:	f000 fa1a 	bl	8008dd8 <bootloader_send_nack>
 }
 80089a4:	bf00      	nop
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	0800be64 	.word	0x0800be64
 80089b0:	0800bd1c 	.word	0x0800bd1c
 80089b4:	0800be80 	.word	0x0800be80
 80089b8:	0800be9c 	.word	0x0800be9c
 80089bc:	0800bec0 	.word	0x0800bec0

080089c0 <bootloader_enable_rw_protect>:
void bootloader_enable_rw_protect(uint8_t * bl_rx_data){
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]

    uint8_t status=0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73fb      	strb	r3, [r7, #15]

	printMessage("BL_enable_rw_protect is run\n");
 80089cc:	481f      	ldr	r0, [pc, #124]	; (8008a4c <bootloader_enable_rw_protect+0x8c>)
 80089ce:	f000 fa39 	bl	8008e44 <printMessage>
	uint32_t command_packet_lenght=bl_rx_data[0]+1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	3301      	adds	r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
	uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089e0:	3b04      	subs	r3, #4
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	4413      	add	r3, r2
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	613b      	str	r3, [r7, #16]

	if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	3b04      	subs	r3, #4
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4619      	mov	r1, r3
 80089fa:	f000 f9a3 	bl	8008d44 <bootloader_verifiy_crc>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d01d      	beq.n	8008a40 <bootloader_enable_rw_protect+0x80>
	{

		printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 8008a04:	4812      	ldr	r0, [pc, #72]	; (8008a50 <bootloader_enable_rw_protect+0x90>)
 8008a06:	f000 fa1d 	bl	8008e44 <printMessage>
		bootloader_send_ack(1);
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	f000 f9cc 	bl	8008da8 <bootloader_send_ack>
		status= configure_flash_sector_rw_protection(bl_rx_data[2],bl_rx_data[3],0);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3302      	adds	r3, #2
 8008a14:	7818      	ldrb	r0, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4619      	mov	r1, r3
 8008a20:	f000 f862 	bl	8008ae8 <configure_flash_sector_rw_protection>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]
		printMessage("BL_DEBUG_MESSAGE: Flash protect status : %d \n",status);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4809      	ldr	r0, [pc, #36]	; (8008a54 <bootloader_enable_rw_protect+0x94>)
 8008a2e:	f000 fa09 	bl	8008e44 <printMessage>
		bootloader_uart_write_data(&status, 1);
 8008a32:	f107 030f 	add.w	r3, r7, #15
 8008a36:	2101      	movs	r1, #1
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 f9df 	bl	8008dfc <bootloader_uart_write_data>
		bootloader_send_nack();
		}



}
 8008a3e:	e001      	b.n	8008a44 <bootloader_enable_rw_protect+0x84>
		bootloader_send_nack();
 8008a40:	f000 f9ca 	bl	8008dd8 <bootloader_send_nack>
}
 8008a44:	bf00      	nop
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	0800bee8 	.word	0x0800bee8
 8008a50:	0800bd1c 	.word	0x0800bd1c
 8008a54:	0800bf08 	.word	0x0800bf08

08008a58 <bootloader_disable_rw_protect>:
void bootloader_disable_rw_protect(uint8_t * bl_rx_data){
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]

	 uint8_t status=0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]

		printMessage("BL_enable_rw_protect is run\n");
 8008a64:	481d      	ldr	r0, [pc, #116]	; (8008adc <bootloader_disable_rw_protect+0x84>)
 8008a66:	f000 f9ed 	bl	8008e44 <printMessage>
		uint32_t command_packet_lenght=bl_rx_data[0]+1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	617b      	str	r3, [r7, #20]
		uint32_t host_crc= *((uint32_t*)bl_rx_data+command_packet_lenght-4);
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	613b      	str	r3, [r7, #16]

		if(bootloader_verifiy_crc(bl_rx_data[0], command_packet_lenght-4, host_crc))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	3b04      	subs	r3, #4
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	4619      	mov	r1, r3
 8008a92:	f000 f957 	bl	8008d44 <bootloader_verifiy_crc>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d018      	beq.n	8008ace <bootloader_disable_rw_protect+0x76>
		{

			printMessage("BL_DEBUG_MESSAGE: Checksum succes \n");
 8008a9c:	4810      	ldr	r0, [pc, #64]	; (8008ae0 <bootloader_disable_rw_protect+0x88>)
 8008a9e:	f000 f9d1 	bl	8008e44 <printMessage>
			bootloader_send_ack(1);
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	f000 f980 	bl	8008da8 <bootloader_send_ack>
			status= configure_flash_sector_rw_protection(0,0,1);
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	2100      	movs	r1, #0
 8008aac:	2000      	movs	r0, #0
 8008aae:	f000 f81b 	bl	8008ae8 <configure_flash_sector_rw_protection>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
			printMessage("BL_DEBUG_MESSAGE: Flash protect status : %d \n",status);
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	480a      	ldr	r0, [pc, #40]	; (8008ae4 <bootloader_disable_rw_protect+0x8c>)
 8008abc:	f000 f9c2 	bl	8008e44 <printMessage>
			bootloader_uart_write_data(&status, 1);
 8008ac0:	f107 030f 	add.w	r3, r7, #15
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f998 	bl	8008dfc <bootloader_uart_write_data>
		}
		else{
			bootloader_send_nack();
			}
}
 8008acc:	e001      	b.n	8008ad2 <bootloader_disable_rw_protect+0x7a>
			bootloader_send_nack();
 8008ace:	f000 f983 	bl	8008dd8 <bootloader_send_nack>
}
 8008ad2:	bf00      	nop
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	0800bee8 	.word	0x0800bee8
 8008ae0:	0800bd1c 	.word	0x0800bd1c
 8008ae4:	0800bf08 	.word	0x0800bf08

08008ae8 <configure_flash_sector_rw_protection>:

uint8_t configure_flash_sector_rw_protection(uint8_t sectorDetails,uint8_t protesctionModes,uint8_t enableOrDisable){
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	71fb      	strb	r3, [r7, #7]
 8008af2:	460b      	mov	r3, r1
 8008af4:	71bb      	strb	r3, [r7, #6]
 8008af6:	4613      	mov	r3, r2
 8008af8:	717b      	strb	r3, [r7, #5]

	volatile uint32_t *pOPTCR=(uint32_t*)0x40023C14;
 8008afa:	4b3a      	ldr	r3, [pc, #232]	; (8008be4 <configure_flash_sector_rw_protection+0xfc>)
 8008afc:	60fb      	str	r3, [r7, #12]

	//enableorisable==0 -> en-wr-protect | enableordisable==1, en-wr-protect | disableordisable==1,
if(enableOrDisable==1){
 8008afe:	797b      	ldrb	r3, [r7, #5]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d11e      	bne.n	8008b42 <configure_flash_sector_rw_protection+0x5a>
	HAL_FLASH_OB_Unlock();
 8008b04:	f000 ff90 	bl	8009a28 <HAL_FLASH_OB_Unlock>

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)!=RESET);
 8008b08:	bf00      	nop
 8008b0a:	4b37      	ldr	r3, [pc, #220]	; (8008be8 <configure_flash_sector_rw_protection+0x100>)
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f9      	bne.n	8008b0a <configure_flash_sector_rw_protection+0x22>

	*pOPTCR |= (0xFF <<16 );
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]

	*pOPTCR |= (1<<1);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f043 0202 	orr.w	r2, r3, #2
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]

	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)!=RESET);
 8008b2e:	bf00      	nop
 8008b30:	4b2d      	ldr	r3, [pc, #180]	; (8008be8 <configure_flash_sector_rw_protection+0x100>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f9      	bne.n	8008b30 <configure_flash_sector_rw_protection+0x48>

	HAL_FLASH_OB_Lock();
 8008b3c:	f000 ff90 	bl	8009a60 <HAL_FLASH_OB_Lock>
 8008b40:	e04b      	b.n	8008bda <configure_flash_sector_rw_protection+0xf2>

}else{
	if(protesctionModes==1){
 8008b42:	79bb      	ldrb	r3, [r7, #6]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d120      	bne.n	8008b8a <configure_flash_sector_rw_protection+0xa2>
			//write protection

			HAL_FLASH_OB_Unlock();
 8008b48:	f000 ff6e 	bl	8009a28 <HAL_FLASH_OB_Unlock>

			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)!=RESET);
 8008b4c:	bf00      	nop
 8008b4e:	4b26      	ldr	r3, [pc, #152]	; (8008be8 <configure_flash_sector_rw_protection+0x100>)
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f9      	bne.n	8008b4e <configure_flash_sector_rw_protection+0x66>

			*pOPTCR &= ~(sectorDetails <<16 );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	79fa      	ldrb	r2, [r7, #7]
 8008b60:	0412      	lsls	r2, r2, #16
 8008b62:	43d2      	mvns	r2, r2
 8008b64:	401a      	ands	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	601a      	str	r2, [r3, #0]

			*pOPTCR |= (1<<1);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f043 0202 	orr.w	r2, r3, #2
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	601a      	str	r2, [r3, #0]

			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)!=RESET);
 8008b76:	bf00      	nop
 8008b78:	4b1b      	ldr	r3, [pc, #108]	; (8008be8 <configure_flash_sector_rw_protection+0x100>)
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1f9      	bne.n	8008b78 <configure_flash_sector_rw_protection+0x90>

			HAL_FLASH_OB_Lock();
 8008b84:	f000 ff6c 	bl	8009a60 <HAL_FLASH_OB_Lock>
 8008b88:	e027      	b.n	8008bda <configure_flash_sector_rw_protection+0xf2>

		}else if(protesctionModes==2){
 8008b8a:	79bb      	ldrb	r3, [r7, #6]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d124      	bne.n	8008bda <configure_flash_sector_rw_protection+0xf2>
			//read write protection

			HAL_FLASH_OB_Unlock();
 8008b90:	f000 ff4a 	bl	8009a28 <HAL_FLASH_OB_Unlock>

			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)!=RESET);
 8008b94:	bf00      	nop
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <configure_flash_sector_rw_protection+0x100>)
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1f9      	bne.n	8008b96 <configure_flash_sector_rw_protection+0xae>

			*pOPTCR &= ~(0xFF <<16 );
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	601a      	str	r2, [r3, #0]

			*pOPTCR |= (sectorDetails<<16);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	79fa      	ldrb	r2, [r7, #7]
 8008bb4:	0412      	lsls	r2, r2, #16
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	601a      	str	r2, [r3, #0]

			*pOPTCR |= (1<<1);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f043 0202 	orr.w	r2, r3, #2
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	601a      	str	r2, [r3, #0]

			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)!=RESET);
 8008bc8:	bf00      	nop
 8008bca:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <configure_flash_sector_rw_protection+0x100>)
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1f9      	bne.n	8008bca <configure_flash_sector_rw_protection+0xe2>

			HAL_FLASH_OB_Lock();
 8008bd6:	f000 ff43 	bl	8009a60 <HAL_FLASH_OB_Lock>
		}
}

	return 0;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	40023c14 	.word	0x40023c14
 8008be8:	40023c00 	.word	0x40023c00

08008bec <execute_flash_erase>:
uint8_t execute_flash_erase(uint8_t sectorNumber,uint8_t numberOfSector){
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08a      	sub	sp, #40	; 0x28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	460a      	mov	r2, r1
 8008bf6:	71fb      	strb	r3, [r7, #7]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	71bb      	strb	r3, [r7, #6]

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct={0};
 8008bfc:	f107 0310 	add.w	r3, r7, #16
 8008c00:	2200      	movs	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	605a      	str	r2, [r3, #4]
 8008c06:	609a      	str	r2, [r3, #8]
 8008c08:	60da      	str	r2, [r3, #12]
 8008c0a:	611a      	str	r2, [r3, #16]
	uint32_t sectorError=0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status={0};
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(numberOfSector>11){
 8008c16:	79bb      	ldrb	r3, [r7, #6]
 8008c18:	2b0b      	cmp	r3, #11
 8008c1a:	d901      	bls.n	8008c20 <execute_flash_erase+0x34>
		return INVALID_SECTOR;
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	e034      	b.n	8008c8a <execute_flash_erase+0x9e>

	}if((numberOfSector<=11) || sectorNumber==0xFF ){
 8008c20:	79bb      	ldrb	r3, [r7, #6]
 8008c22:	2b0b      	cmp	r3, #11
 8008c24:	d902      	bls.n	8008c2c <execute_flash_erase+0x40>
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	2bff      	cmp	r3, #255	; 0xff
 8008c2a:	d12e      	bne.n	8008c8a <execute_flash_erase+0x9e>

		if(sectorNumber==0xFF ){
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	2bff      	cmp	r3, #255	; 0xff
 8008c30:	d102      	bne.n	8008c38 <execute_flash_erase+0x4c>
			FLASH_EraseInitStruct.TypeErase=FLASH_TYPEERASE_MASSERASE;
 8008c32:	2301      	movs	r3, #1
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	e012      	b.n	8008c5e <execute_flash_erase+0x72>
		}
		else{//sector erase

			uint8_t remainingSector =11 -sectorNumber;
 8008c38:	79fb      	ldrb	r3, [r7, #7]
 8008c3a:	f1c3 030b 	rsb	r3, r3, #11
 8008c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(sectorNumber>remainingSector)
 8008c42:	79fa      	ldrb	r2, [r7, #7]
 8008c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d902      	bls.n	8008c52 <execute_flash_erase+0x66>
				sectorNumber=remainingSector;
 8008c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c50:	71fb      	strb	r3, [r7, #7]
			FLASH_EraseInitStruct.TypeErase=FLASH_TYPEERASE_SECTORS;
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
			FLASH_EraseInitStruct.Sector=sectorNumber;
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	61bb      	str	r3, [r7, #24]
			FLASH_EraseInitStruct.NbSectors=numberOfSector;
 8008c5a:	79bb      	ldrb	r3, [r7, #6]
 8008c5c:	61fb      	str	r3, [r7, #28]
		}
		FLASH_EraseInitStruct.Banks=FLASH_BANK_1;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	617b      	str	r3, [r7, #20]
		HAL_FLASH_Unlock();
 8008c62:	f000 feaf 	bl	80099c4 <HAL_FLASH_Unlock>
		FLASH_EraseInitStruct.VoltageRange=FLASH_VOLTAGE_RANGE_3;
 8008c66:	2302      	movs	r3, #2
 8008c68:	623b      	str	r3, [r7, #32]
		status=(uint8_t) HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectorError);
 8008c6a:	f107 020c 	add.w	r2, r7, #12
 8008c6e:	f107 0310 	add.w	r3, r7, #16
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 f833 	bl	8009ce0 <HAL_FLASHEx_Erase>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_FLASH_Lock();
 8008c80:	f000 fec2 	bl	8009a08 <HAL_FLASH_Lock>
		return status;
 8008c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c88:	e7ff      	b.n	8008c8a <execute_flash_erase+0x9e>
	}

}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3728      	adds	r7, #40	; 0x28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <execute_memory_write>:
uint8_t execute_memory_write(uint8_t * buffer,uint32_t memAddress,uint32_t len){
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b086      	sub	sp, #24
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	607a      	str	r2, [r7, #4]

	uint8_t status=0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
	HAL_FLASH_Unlock();
 8008ca2:	f000 fe8f 	bl	80099c4 <HAL_FLASH_Unlock>

	for (int i = 0; i < len; i++) {
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	e011      	b.n	8008cd0 <execute_memory_write+0x3e>
		status=HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,memAddress + i,buffer[i]);
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	18d1      	adds	r1, r2, r3
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	f000 fe2b 	bl	800991c <HAL_FLASH_Program>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < len; i++) {
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	613b      	str	r3, [r7, #16]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d8e9      	bhi.n	8008cac <execute_memory_write+0x1a>
	}

	HAL_FLASH_Lock();
 8008cd8:	f000 fe96 	bl	8009a08 <HAL_FLASH_Lock>
	return status;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <bootloader_verify_address>:

uint8_t bootloader_verify_address(uint32_t goAddress){
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]

	if(goAddress >= FLASH_BASE && goAddress <= FLASH_END  ){
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cf6:	d305      	bcc.n	8008d04 <bootloader_verify_address+0x1c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8008cfe:	d201      	bcs.n	8008d04 <bootloader_verify_address+0x1c>
		return ADDR_VALID;
 8008d00:	2300      	movs	r3, #0
 8008d02:	e014      	b.n	8008d2e <bootloader_verify_address+0x46>
	}else if(goAddress >= SRAM1_BASE && goAddress <= SRAM1_END ){
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d0a:	d305      	bcc.n	8008d18 <bootloader_verify_address+0x30>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a0b      	ldr	r2, [pc, #44]	; (8008d3c <bootloader_verify_address+0x54>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d801      	bhi.n	8008d18 <bootloader_verify_address+0x30>
		return ADDR_VALID;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e00a      	b.n	8008d2e <bootloader_verify_address+0x46>
	}else if(goAddress >= SRAM2_BASE && goAddress <= SRAM2_END ){
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a08      	ldr	r2, [pc, #32]	; (8008d3c <bootloader_verify_address+0x54>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d305      	bcc.n	8008d2c <bootloader_verify_address+0x44>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a07      	ldr	r2, [pc, #28]	; (8008d40 <bootloader_verify_address+0x58>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d801      	bhi.n	8008d2c <bootloader_verify_address+0x44>
		return ADDR_VALID;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e000      	b.n	8008d2e <bootloader_verify_address+0x46>
	}else{
		return ADDR_INVALID;
 8008d2c:	2301      	movs	r3, #1
	}

}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	2001c000 	.word	0x2001c000
 8008d40:	20020000 	.word	0x20020000

08008d44 <bootloader_verifiy_crc>:

uint8_t  bootloader_verifiy_crc(uint8_t *buffer, uint32_t len,uint32_t crc)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]

 uint32_t crcValue=0xFF;
 8008d50:	23ff      	movs	r3, #255	; 0xff
 8008d52:	61fb      	str	r3, [r7, #28]
 uint32_t data=0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]

 for(uint32_t i=0;i<len; i++ ){
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61bb      	str	r3, [r7, #24]
 8008d5c:	e00f      	b.n	8008d7e <bootloader_verifiy_crc+0x3a>
		data=buffer[i];
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	4413      	add	r3, r2
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	617b      	str	r3, [r7, #20]
		crcValue=HAL_CRC_Accumulate(&hcrc, &data, 1);
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	4619      	mov	r1, r3
 8008d70:	480c      	ldr	r0, [pc, #48]	; (8008da4 <bootloader_verifiy_crc+0x60>)
 8008d72:	f000 fda8 	bl	80098c6 <HAL_CRC_Accumulate>
 8008d76:	61f8      	str	r0, [r7, #28]
 for(uint32_t i=0;i<len; i++ ){
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d3eb      	bcc.n	8008d5e <bootloader_verifiy_crc+0x1a>

 }
 __HAL_CRC_RESET_HANDLE_STATE(&hcrc);
 8008d86:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <bootloader_verifiy_crc+0x60>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	715a      	strb	r2, [r3, #5]
 if(crcValue==crc){
 8008d8c:	69fa      	ldr	r2, [r7, #28]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d101      	bne.n	8008d98 <bootloader_verifiy_crc+0x54>
	 return CRC_SUCCESS;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e000      	b.n	8008d9a <bootloader_verifiy_crc+0x56>
 }
 else{
	 return CRC_FAIL;
 8008d98:	2301      	movs	r3, #1
 }
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200001f4 	.word	0x200001f4

08008da8 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t followLenght){
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
	uint8_t ackBuffer[2];
	ackBuffer[0]=BL_ACK_VALUE;
 8008db2:	23a5      	movs	r3, #165	; 0xa5
 8008db4:	733b      	strb	r3, [r7, #12]
	ackBuffer[1]=followLenght;
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart3, &ackBuffer, 2, HAL_MAX_DELAY);
 8008dba:	f107 010c 	add.w	r1, r7, #12
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	4803      	ldr	r0, [pc, #12]	; (8008dd4 <bootloader_send_ack+0x2c>)
 8008dc6:	f001 ffc6 	bl	800ad56 <HAL_UART_Transmit>

}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	200001b0 	.word	0x200001b0

08008dd8 <bootloader_send_nack>:
void bootloader_send_nack(){
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
	uint8_t nackValue= BL_NACK_VALUE;
 8008dde:	237f      	movs	r3, #127	; 0x7f
 8008de0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &nackValue, 1, HAL_MAX_DELAY);
 8008de2:	1df9      	adds	r1, r7, #7
 8008de4:	f04f 33ff 	mov.w	r3, #4294967295
 8008de8:	2201      	movs	r2, #1
 8008dea:	4803      	ldr	r0, [pc, #12]	; (8008df8 <bootloader_send_nack+0x20>)
 8008dec:	f001 ffb3 	bl	800ad56 <HAL_UART_Transmit>
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	200001b0 	.word	0x200001b0

08008dfc <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *dataBuff, uint8_t len){
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3, dataBuff, len, HAL_MAX_DELAY);
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4803      	ldr	r0, [pc, #12]	; (8008e20 <bootloader_uart_write_data+0x24>)
 8008e14:	f001 ff9f 	bl	800ad56 <HAL_UART_Transmit>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	200001b0 	.word	0x200001b0

08008e24 <get_flash_rdp_levell>:
/*uint16_t get_mcu_chipid(void){
	return (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;

}*/

uint8_t get_flash_rdp_levell(void){
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
	uint8_t rdp_level=0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	77fb      	strb	r3, [r7, #31]
	volatile (uint32_t)OB_Address=(uint32_t*)0x1FFFC000;
	rdp_level=(uint8_t)(*OB_Address>>8);
	return rdp_level;
#else
	FLASH_OBProgramInitTypeDef OBProgramInitTStruct;
	HAL_FLASHEx_OBGetConfig(&OBProgramInitTStruct);
 8008e2e:	463b      	mov	r3, r7
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 ffc5 	bl	8009dc0 <HAL_FLASHEx_OBGetConfig>
	rdp_level=(uint8_t)OBProgramInitTStruct.RDPLevel;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	77fb      	strb	r3, [r7, #31]
	return rdp_level;
 8008e3a:	7ffb      	ldrb	r3, [r7, #31]
#endif
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <printMessage>:

uint8_t bootloader_rx_data[BL_RX_DATA_LENGHT];


void printMessage(char *format,...)
{
 8008e44:	b40f      	push	{r0, r1, r2, r3}
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b09a      	sub	sp, #104	; 0x68
 8008e4a:	af00      	add	r7, sp, #0
	char comingMessage[100];
	va_list vaList;
	va_start(vaList,format);
 8008e4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008e50:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 8008e52:	1d3b      	adds	r3, r7, #4
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f002 fb2f 	bl	800b4bc <vsiprintf>
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)comingMessage, strlen(comingMessage), HAL__UART_MAX_DELAY);
 8008e5e:	1d3b      	adds	r3, r7, #4
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7ff f9b5 	bl	80081d0 <strlen>
 8008e66:	4603      	mov	r3, r0
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	1d39      	adds	r1, r7, #4
 8008e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e70:	4804      	ldr	r0, [pc, #16]	; (8008e84 <printMessage+0x40>)
 8008e72:	f001 ff70 	bl	800ad56 <HAL_UART_Transmit>
    va_end(vaList);
}
 8008e76:	bf00      	nop
 8008e78:	3768      	adds	r7, #104	; 0x68
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e80:	b004      	add	sp, #16
 8008e82:	4770      	bx	lr
 8008e84:	200001b0 	.word	0x200001b0

08008e88 <bootloader_uart_read_data>:


void bootloader_uart_read_data(){
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0

	uint8_t bl_rx_lenght=0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	71fb      	strb	r3, [r7, #7]

	while(1){

		memset(bootloader_rx_data,0,BL_RX_DATA_LENGHT);
 8008e92:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8008e96:	2100      	movs	r1, #0
 8008e98:	482d      	ldr	r0, [pc, #180]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008e9a:	f002 faf1 	bl	800b480 <memset>
		HAL_UART_Receive(&huart3,bootloader_rx_data, 1, HAL__UART_MAX_DELAY);
 8008e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	492a      	ldr	r1, [pc, #168]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008ea6:	482b      	ldr	r0, [pc, #172]	; (8008f54 <bootloader_uart_read_data+0xcc>)
 8008ea8:	f001 ffe7 	bl	800ae7a <HAL_UART_Receive>
		bl_rx_lenght=bootloader_rx_data[0];
 8008eac:	4b28      	ldr	r3, [pc, #160]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart3,&bootloader_rx_data[1], bl_rx_lenght, HAL__UART_MAX_DELAY);
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008eba:	4927      	ldr	r1, [pc, #156]	; (8008f58 <bootloader_uart_read_data+0xd0>)
 8008ebc:	4825      	ldr	r0, [pc, #148]	; (8008f54 <bootloader_uart_read_data+0xcc>)
 8008ebe:	f001 ffdc 	bl	800ae7a <HAL_UART_Receive>

		switch(bootloader_rx_data[1]){
 8008ec2:	4b23      	ldr	r3, [pc, #140]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	3b51      	subs	r3, #81	; 0x51
 8008ec8:	2b0b      	cmp	r3, #11
 8008eca:	d83f      	bhi.n	8008f4c <bootloader_uart_read_data+0xc4>
 8008ecc:	a201      	add	r2, pc, #4	; (adr r2, 8008ed4 <bootloader_uart_read_data+0x4c>)
 8008ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed2:	bf00      	nop
 8008ed4:	08008f05 	.word	0x08008f05
 8008ed8:	08008f0d 	.word	0x08008f0d
 8008edc:	08008f15 	.word	0x08008f15
 8008ee0:	08008f1d 	.word	0x08008f1d
 8008ee4:	08008f25 	.word	0x08008f25
 8008ee8:	08008f2d 	.word	0x08008f2d
 8008eec:	08008f35 	.word	0x08008f35
 8008ef0:	08008f3d 	.word	0x08008f3d
 8008ef4:	08008f4d 	.word	0x08008f4d
 8008ef8:	08008f4d 	.word	0x08008f4d
 8008efc:	08008f4d 	.word	0x08008f4d
 8008f00:	08008f45 	.word	0x08008f45
		case BL_GET_VER :
			bootloader_get_ver_cmd(bootloader_rx_data);
 8008f04:	4812      	ldr	r0, [pc, #72]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f06:	f7ff fb37 	bl	8008578 <bootloader_get_ver_cmd>
			break;
 8008f0a:	e020      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		case BL_GET_HELP :
			bootloader_get_help(bootloader_rx_data);
 8008f0c:	4810      	ldr	r0, [pc, #64]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f0e:	f7ff fb65 	bl	80085dc <bootloader_get_help>
			break;
 8008f12:	e01c      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		case BL_GET_CID :
			bootloader_get_cid(bootloader_rx_data);
 8008f14:	480e      	ldr	r0, [pc, #56]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f16:	f7ff fba3 	bl	8008660 <bootloader_get_cid>
			break;
 8008f1a:	e018      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		case BL_GET_RDP_STATUS :
			bootloader_get_rdp_cmd(bootloader_rx_data);
 8008f1c:	480c      	ldr	r0, [pc, #48]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f1e:	f7ff fbeb 	bl	80086f8 <bootloader_get_rdp_cmd>
			break;
 8008f22:	e014      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		case BL_GO_TO_ADDR :
			bootloader_go_to_addr(bootloader_rx_data);
 8008f24:	480a      	ldr	r0, [pc, #40]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f26:	f7ff fc2b 	bl	8008780 <bootloader_go_to_addr>
			break;
 8008f2a:	e010      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		case BL_FLASH_ERASE :
			bootloader_flash_erase(bootloader_rx_data);
 8008f2c:	4808      	ldr	r0, [pc, #32]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f2e:	f7ff fc8b 	bl	8008848 <bootloader_flash_erase>
			break;
 8008f32:	e00c      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		case BL_MEM_WRITE :
			bootloader_mem_write_cmd(bootloader_rx_data);
 8008f34:	4806      	ldr	r0, [pc, #24]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f36:	f7ff fccd 	bl	80088d4 <bootloader_mem_write_cmd>
			break;
 8008f3a:	e008      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		case BL_EN_RW_PROTECT :
			bootloader_enable_rw_protect(bootloader_rx_data);
 8008f3c:	4804      	ldr	r0, [pc, #16]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f3e:	f7ff fd3f 	bl	80089c0 <bootloader_enable_rw_protect>
			break;
 8008f42:	e004      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		case BL_DIS_R_W_PROTECT :
			bootloader_disable_rw_protect(bootloader_rx_data);
 8008f44:	4802      	ldr	r0, [pc, #8]	; (8008f50 <bootloader_uart_read_data+0xc8>)
 8008f46:	f7ff fd87 	bl	8008a58 <bootloader_disable_rw_protect>
			break;
 8008f4a:	e000      	b.n	8008f4e <bootloader_uart_read_data+0xc6>
		default:
			break;
 8008f4c:	bf00      	nop
		memset(bootloader_rx_data,0,BL_RX_DATA_LENGHT);
 8008f4e:	e7a0      	b.n	8008e92 <bootloader_uart_read_data+0xa>
 8008f50:	200000a4 	.word	0x200000a4
 8008f54:	200001b0 	.word	0x200001b0
 8008f58:	200000a5 	.word	0x200000a5

08008f5c <bootloader_jump_to_user_app>:

	}
  }


void bootloader_jump_to_user_app(){
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
	// 1- Sifirlama isleyicisinin adresini tutan bir fonksiyon gÃ¶stericisi

	void (*bootloader_application_reset_handler)(void);
	// 2- Kullanici uygulamasina atlama kodu Ã§agrildi

	printMessage("BL DEBUG MSG: Called bootloader_jump_to_user_application() \n");
 8008f62:	480f      	ldr	r0, [pc, #60]	; (8008fa0 <bootloader_jump_to_user_app+0x44>)
 8008f64:	f7ff ff6e 	bl	8008e44 <printMessage>

	// 3- MSP'nin degerini tut

	uint32_t mspValue = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 8008f68:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <bootloader_jump_to_user_app+0x48>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60fb      	str	r3, [r7, #12]
	printMessage("BL DEBUG MSG: MSP Value: %#x \n", mspValue);
 8008f6e:	68f9      	ldr	r1, [r7, #12]
 8008f70:	480d      	ldr	r0, [pc, #52]	; (8008fa8 <bootloader_jump_to_user_app+0x4c>)
 8008f72:	f7ff ff67 	bl	8008e44 <printMessage>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	f383 8808 	msr	MSP, r3
}
 8008f80:	bf00      	nop
	__set_MSP(mspValue);

	// 4- Sifirlama isleyicisinin degerini tut

	uint32_t resetValue = *(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8008f82:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <bootloader_jump_to_user_app+0x50>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60bb      	str	r3, [r7, #8]
	printMessage("BL DEBUG MSG: Reset Value: %#x \n", resetValue);
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	4809      	ldr	r0, [pc, #36]	; (8008fb0 <bootloader_jump_to_user_app+0x54>)
 8008f8c:	f7ff ff5a 	bl	8008e44 <printMessage>
	// 5- Sifirlama isleyicisi ile bir islev baslat

	bootloader_application_reset_handler = (void*) resetValue;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	607b      	str	r3, [r7, #4]
	// 6- Sifirlama isleyicisini Ã§agir ve kullanici uygulamasina atla

	bootloader_application_reset_handler();
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4798      	blx	r3
}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	0800bf38 	.word	0x0800bf38
 8008fa4:	08008000 	.word	0x08008000
 8008fa8:	0800bf78 	.word	0x0800bf78
 8008fac:	08008004 	.word	0x08008004
 8008fb0:	0800bf98 	.word	0x0800bf98

08008fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008fb8:	f000 faee 	bl	8009598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008fbc:	f000 f83c 	bl	8009038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008fc0:	f000 f90c 	bl	80091dc <MX_GPIO_Init>
  MX_CRC_Init();
 8008fc4:	f000 f8a2 	bl	800910c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8008fc8:	f000 f8b4 	bl	8009134 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008fcc:	f000 f8dc 	bl	8009188 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	4812      	ldr	r0, [pc, #72]	; (800901c <main+0x68>)
 8008fd4:	f001 f9b2 	bl	800a33c <HAL_GPIO_ReadPin>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d105      	bne.n	8008fea <main+0x36>
	  printMessage("button is pressed go to BL code");
 8008fde:	4810      	ldr	r0, [pc, #64]	; (8009020 <main+0x6c>)
 8008fe0:	f7ff ff30 	bl	8008e44 <printMessage>
	  bootloader_uart_read_data();
 8008fe4:	f7ff ff50 	bl	8008e88 <bootloader_uart_read_data>
 8008fe8:	e004      	b.n	8008ff4 <main+0x40>

  }else{
	  printMessage("button is Not pressed go to user code");
 8008fea:	480e      	ldr	r0, [pc, #56]	; (8009024 <main+0x70>)
 8008fec:	f7ff ff2a 	bl	8008e44 <printMessage>
	  bootloader_jump_to_user_app();
 8008ff0:	f7ff ffb4 	bl	8008f5c <bootloader_jump_to_user_app>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8008ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008ff8:	480b      	ldr	r0, [pc, #44]	; (8009028 <main+0x74>)
 8008ffa:	f001 f9d0 	bl	800a39e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8008ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009002:	f000 fb3b 	bl	800967c <HAL_Delay>
	  HAL_UART_Transmit(&huart3, "samed\r\n", 7, 100);
 8009006:	2364      	movs	r3, #100	; 0x64
 8009008:	2207      	movs	r2, #7
 800900a:	4908      	ldr	r1, [pc, #32]	; (800902c <main+0x78>)
 800900c:	4808      	ldr	r0, [pc, #32]	; (8009030 <main+0x7c>)
 800900e:	f001 fea2 	bl	800ad56 <HAL_UART_Transmit>
	  printMessage("baskin\r\n");
 8009012:	4808      	ldr	r0, [pc, #32]	; (8009034 <main+0x80>)
 8009014:	f7ff ff16 	bl	8008e44 <printMessage>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8009018:	e7ec      	b.n	8008ff4 <main+0x40>
 800901a:	bf00      	nop
 800901c:	40020000 	.word	0x40020000
 8009020:	0800bfbc 	.word	0x0800bfbc
 8009024:	0800bfdc 	.word	0x0800bfdc
 8009028:	40020c00 	.word	0x40020c00
 800902c:	0800c004 	.word	0x0800c004
 8009030:	200001b0 	.word	0x200001b0
 8009034:	0800c00c 	.word	0x0800c00c

08009038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b094      	sub	sp, #80	; 0x50
 800903c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800903e:	f107 0320 	add.w	r3, r7, #32
 8009042:	2230      	movs	r2, #48	; 0x30
 8009044:	2100      	movs	r1, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f002 fa1a 	bl	800b480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800904c:	f107 030c 	add.w	r3, r7, #12
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	605a      	str	r2, [r3, #4]
 8009056:	609a      	str	r2, [r3, #8]
 8009058:	60da      	str	r2, [r3, #12]
 800905a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800905c:	2300      	movs	r3, #0
 800905e:	60bb      	str	r3, [r7, #8]
 8009060:	4b28      	ldr	r3, [pc, #160]	; (8009104 <SystemClock_Config+0xcc>)
 8009062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009064:	4a27      	ldr	r2, [pc, #156]	; (8009104 <SystemClock_Config+0xcc>)
 8009066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800906a:	6413      	str	r3, [r2, #64]	; 0x40
 800906c:	4b25      	ldr	r3, [pc, #148]	; (8009104 <SystemClock_Config+0xcc>)
 800906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009078:	2300      	movs	r3, #0
 800907a:	607b      	str	r3, [r7, #4]
 800907c:	4b22      	ldr	r3, [pc, #136]	; (8009108 <SystemClock_Config+0xd0>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a21      	ldr	r2, [pc, #132]	; (8009108 <SystemClock_Config+0xd0>)
 8009082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	4b1f      	ldr	r3, [pc, #124]	; (8009108 <SystemClock_Config+0xd0>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009090:	607b      	str	r3, [r7, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009094:	2301      	movs	r3, #1
 8009096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800909e:	2302      	movs	r3, #2
 80090a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80090a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80090a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80090a8:	2304      	movs	r3, #4
 80090aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80090ac:	23a8      	movs	r3, #168	; 0xa8
 80090ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80090b0:	2302      	movs	r3, #2
 80090b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80090b4:	2304      	movs	r3, #4
 80090b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80090b8:	f107 0320 	add.w	r3, r7, #32
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 f989 	bl	800a3d4 <HAL_RCC_OscConfig>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80090c8:	f000 f8f6 	bl	80092b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80090cc:	230f      	movs	r3, #15
 80090ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80090d0:	2302      	movs	r3, #2
 80090d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80090d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80090dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80090de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80090e4:	f107 030c 	add.w	r3, r7, #12
 80090e8:	2105      	movs	r1, #5
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 fbea 	bl	800a8c4 <HAL_RCC_ClockConfig>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80090f6:	f000 f8df 	bl	80092b8 <Error_Handler>
  }
}
 80090fa:	bf00      	nop
 80090fc:	3750      	adds	r7, #80	; 0x50
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	40023800 	.word	0x40023800
 8009108:	40007000 	.word	0x40007000

0800910c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <MX_CRC_Init+0x20>)
 8009112:	4a07      	ldr	r2, [pc, #28]	; (8009130 <MX_CRC_Init+0x24>)
 8009114:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8009116:	4805      	ldr	r0, [pc, #20]	; (800912c <MX_CRC_Init+0x20>)
 8009118:	f000 fbb9 	bl	800988e <HAL_CRC_Init>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8009122:	f000 f8c9 	bl	80092b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8009126:	bf00      	nop
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200001f4 	.word	0x200001f4
 8009130:	40023000 	.word	0x40023000

08009134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 800913a:	4a12      	ldr	r2, [pc, #72]	; (8009184 <MX_USART1_UART_Init+0x50>)
 800913c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 8009140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009146:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 8009148:	2200      	movs	r2, #0
 800914a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800914c:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 800914e:	2200      	movs	r2, #0
 8009150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009152:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 8009154:	2200      	movs	r2, #0
 8009156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009158:	4b09      	ldr	r3, [pc, #36]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 800915a:	220c      	movs	r2, #12
 800915c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800915e:	4b08      	ldr	r3, [pc, #32]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 8009160:	2200      	movs	r2, #0
 8009162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009164:	4b06      	ldr	r3, [pc, #24]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 8009166:	2200      	movs	r2, #0
 8009168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800916a:	4805      	ldr	r0, [pc, #20]	; (8009180 <MX_USART1_UART_Init+0x4c>)
 800916c:	f001 fda6 	bl	800acbc <HAL_UART_Init>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009176:	f000 f89f 	bl	80092b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800917a:	bf00      	nop
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	200001fc 	.word	0x200001fc
 8009184:	40011000 	.word	0x40011000

08009188 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800918c:	4b11      	ldr	r3, [pc, #68]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 800918e:	4a12      	ldr	r2, [pc, #72]	; (80091d8 <MX_USART3_UART_Init+0x50>)
 8009190:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009192:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 8009194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009198:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800919a:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 800919c:	2200      	movs	r2, #0
 800919e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80091a0:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 80091ae:	220c      	movs	r2, #12
 80091b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80091b2:	4b08      	ldr	r3, [pc, #32]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80091b8:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80091be:	4805      	ldr	r0, [pc, #20]	; (80091d4 <MX_USART3_UART_Init+0x4c>)
 80091c0:	f001 fd7c 	bl	800acbc <HAL_UART_Init>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80091ca:	f000 f875 	bl	80092b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80091ce:	bf00      	nop
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	200001b0 	.word	0x200001b0
 80091d8:	40004800 	.word	0x40004800

080091dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	; 0x28
 80091e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091e2:	f107 0314 	add.w	r3, r7, #20
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	605a      	str	r2, [r3, #4]
 80091ec:	609a      	str	r2, [r3, #8]
 80091ee:	60da      	str	r2, [r3, #12]
 80091f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80091f2:	2300      	movs	r3, #0
 80091f4:	613b      	str	r3, [r7, #16]
 80091f6:	4b2d      	ldr	r3, [pc, #180]	; (80092ac <MX_GPIO_Init+0xd0>)
 80091f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fa:	4a2c      	ldr	r2, [pc, #176]	; (80092ac <MX_GPIO_Init+0xd0>)
 80091fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009200:	6313      	str	r3, [r2, #48]	; 0x30
 8009202:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <MX_GPIO_Init+0xd0>)
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920a:	613b      	str	r3, [r7, #16]
 800920c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	4b26      	ldr	r3, [pc, #152]	; (80092ac <MX_GPIO_Init+0xd0>)
 8009214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009216:	4a25      	ldr	r2, [pc, #148]	; (80092ac <MX_GPIO_Init+0xd0>)
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	6313      	str	r3, [r2, #48]	; 0x30
 800921e:	4b23      	ldr	r3, [pc, #140]	; (80092ac <MX_GPIO_Init+0xd0>)
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800922a:	2300      	movs	r3, #0
 800922c:	60bb      	str	r3, [r7, #8]
 800922e:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <MX_GPIO_Init+0xd0>)
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	4a1e      	ldr	r2, [pc, #120]	; (80092ac <MX_GPIO_Init+0xd0>)
 8009234:	f043 0308 	orr.w	r3, r3, #8
 8009238:	6313      	str	r3, [r2, #48]	; 0x30
 800923a:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <MX_GPIO_Init+0xd0>)
 800923c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	60bb      	str	r3, [r7, #8]
 8009244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009246:	2300      	movs	r3, #0
 8009248:	607b      	str	r3, [r7, #4]
 800924a:	4b18      	ldr	r3, [pc, #96]	; (80092ac <MX_GPIO_Init+0xd0>)
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	4a17      	ldr	r2, [pc, #92]	; (80092ac <MX_GPIO_Init+0xd0>)
 8009250:	f043 0304 	orr.w	r3, r3, #4
 8009254:	6313      	str	r3, [r2, #48]	; 0x30
 8009256:	4b15      	ldr	r3, [pc, #84]	; (80092ac <MX_GPIO_Init+0xd0>)
 8009258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	607b      	str	r3, [r7, #4]
 8009260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8009262:	2200      	movs	r2, #0
 8009264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009268:	4811      	ldr	r0, [pc, #68]	; (80092b0 <MX_GPIO_Init+0xd4>)
 800926a:	f001 f87f 	bl	800a36c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800926e:	2301      	movs	r3, #1
 8009270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009272:	2300      	movs	r3, #0
 8009274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800927a:	f107 0314 	add.w	r3, r7, #20
 800927e:	4619      	mov	r1, r3
 8009280:	480c      	ldr	r0, [pc, #48]	; (80092b4 <MX_GPIO_Init+0xd8>)
 8009282:	f000 febf 	bl	800a004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800928a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800928c:	2301      	movs	r3, #1
 800928e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009294:	2300      	movs	r3, #0
 8009296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009298:	f107 0314 	add.w	r3, r7, #20
 800929c:	4619      	mov	r1, r3
 800929e:	4804      	ldr	r0, [pc, #16]	; (80092b0 <MX_GPIO_Init+0xd4>)
 80092a0:	f000 feb0 	bl	800a004 <HAL_GPIO_Init>

}
 80092a4:	bf00      	nop
 80092a6:	3728      	adds	r7, #40	; 0x28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	40023800 	.word	0x40023800
 80092b0:	40020c00 	.word	0x40020c00
 80092b4:	40020000 	.word	0x40020000

080092b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80092b8:	b480      	push	{r7}
 80092ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80092bc:	b672      	cpsid	i
}
 80092be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80092c0:	e7fe      	b.n	80092c0 <Error_Handler+0x8>
	...

080092c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092ca:	2300      	movs	r3, #0
 80092cc:	607b      	str	r3, [r7, #4]
 80092ce:	4b10      	ldr	r3, [pc, #64]	; (8009310 <HAL_MspInit+0x4c>)
 80092d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d2:	4a0f      	ldr	r2, [pc, #60]	; (8009310 <HAL_MspInit+0x4c>)
 80092d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092d8:	6453      	str	r3, [r2, #68]	; 0x44
 80092da:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <HAL_MspInit+0x4c>)
 80092dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e2:	607b      	str	r3, [r7, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092e6:	2300      	movs	r3, #0
 80092e8:	603b      	str	r3, [r7, #0]
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_MspInit+0x4c>)
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	4a08      	ldr	r2, [pc, #32]	; (8009310 <HAL_MspInit+0x4c>)
 80092f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092f4:	6413      	str	r3, [r2, #64]	; 0x40
 80092f6:	4b06      	ldr	r3, [pc, #24]	; (8009310 <HAL_MspInit+0x4c>)
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	40023800 	.word	0x40023800

08009314 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a0b      	ldr	r2, [pc, #44]	; (8009350 <HAL_CRC_MspInit+0x3c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d10d      	bne.n	8009342 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <HAL_CRC_MspInit+0x40>)
 800932c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932e:	4a09      	ldr	r2, [pc, #36]	; (8009354 <HAL_CRC_MspInit+0x40>)
 8009330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009334:	6313      	str	r3, [r2, #48]	; 0x30
 8009336:	4b07      	ldr	r3, [pc, #28]	; (8009354 <HAL_CRC_MspInit+0x40>)
 8009338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009342:	bf00      	nop
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	40023000 	.word	0x40023000
 8009354:	40023800 	.word	0x40023800

08009358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08c      	sub	sp, #48	; 0x30
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009360:	f107 031c 	add.w	r3, r7, #28
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	605a      	str	r2, [r3, #4]
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	60da      	str	r2, [r3, #12]
 800936e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a33      	ldr	r2, [pc, #204]	; (8009444 <HAL_UART_MspInit+0xec>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d12d      	bne.n	80093d6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800937a:	2300      	movs	r3, #0
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	4b32      	ldr	r3, [pc, #200]	; (8009448 <HAL_UART_MspInit+0xf0>)
 8009380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009382:	4a31      	ldr	r2, [pc, #196]	; (8009448 <HAL_UART_MspInit+0xf0>)
 8009384:	f043 0310 	orr.w	r3, r3, #16
 8009388:	6453      	str	r3, [r2, #68]	; 0x44
 800938a:	4b2f      	ldr	r3, [pc, #188]	; (8009448 <HAL_UART_MspInit+0xf0>)
 800938c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800938e:	f003 0310 	and.w	r3, r3, #16
 8009392:	61bb      	str	r3, [r7, #24]
 8009394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	4b2b      	ldr	r3, [pc, #172]	; (8009448 <HAL_UART_MspInit+0xf0>)
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	4a2a      	ldr	r2, [pc, #168]	; (8009448 <HAL_UART_MspInit+0xf0>)
 80093a0:	f043 0301 	orr.w	r3, r3, #1
 80093a4:	6313      	str	r3, [r2, #48]	; 0x30
 80093a6:	4b28      	ldr	r3, [pc, #160]	; (8009448 <HAL_UART_MspInit+0xf0>)
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80093b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80093b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093b8:	2302      	movs	r3, #2
 80093ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093bc:	2300      	movs	r3, #0
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093c0:	2303      	movs	r3, #3
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80093c4:	2307      	movs	r3, #7
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093c8:	f107 031c 	add.w	r3, r7, #28
 80093cc:	4619      	mov	r1, r3
 80093ce:	481f      	ldr	r0, [pc, #124]	; (800944c <HAL_UART_MspInit+0xf4>)
 80093d0:	f000 fe18 	bl	800a004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80093d4:	e031      	b.n	800943a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a1d      	ldr	r2, [pc, #116]	; (8009450 <HAL_UART_MspInit+0xf8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d12c      	bne.n	800943a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80093e0:	2300      	movs	r3, #0
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	4b18      	ldr	r3, [pc, #96]	; (8009448 <HAL_UART_MspInit+0xf0>)
 80093e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e8:	4a17      	ldr	r2, [pc, #92]	; (8009448 <HAL_UART_MspInit+0xf0>)
 80093ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093ee:	6413      	str	r3, [r2, #64]	; 0x40
 80093f0:	4b15      	ldr	r3, [pc, #84]	; (8009448 <HAL_UART_MspInit+0xf0>)
 80093f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093f8:	613b      	str	r3, [r7, #16]
 80093fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	4b11      	ldr	r3, [pc, #68]	; (8009448 <HAL_UART_MspInit+0xf0>)
 8009402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009404:	4a10      	ldr	r2, [pc, #64]	; (8009448 <HAL_UART_MspInit+0xf0>)
 8009406:	f043 0304 	orr.w	r3, r3, #4
 800940a:	6313      	str	r3, [r2, #48]	; 0x30
 800940c:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <HAL_UART_MspInit+0xf0>)
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009418:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800941c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800941e:	2302      	movs	r3, #2
 8009420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009422:	2300      	movs	r3, #0
 8009424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009426:	2303      	movs	r3, #3
 8009428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800942a:	2307      	movs	r3, #7
 800942c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800942e:	f107 031c 	add.w	r3, r7, #28
 8009432:	4619      	mov	r1, r3
 8009434:	4807      	ldr	r0, [pc, #28]	; (8009454 <HAL_UART_MspInit+0xfc>)
 8009436:	f000 fde5 	bl	800a004 <HAL_GPIO_Init>
}
 800943a:	bf00      	nop
 800943c:	3730      	adds	r7, #48	; 0x30
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	40011000 	.word	0x40011000
 8009448:	40023800 	.word	0x40023800
 800944c:	40020000 	.word	0x40020000
 8009450:	40004800 	.word	0x40004800
 8009454:	40020800 	.word	0x40020800

08009458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800945c:	e7fe      	b.n	800945c <NMI_Handler+0x4>

0800945e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800945e:	b480      	push	{r7}
 8009460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009462:	e7fe      	b.n	8009462 <HardFault_Handler+0x4>

08009464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009468:	e7fe      	b.n	8009468 <MemManage_Handler+0x4>

0800946a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800946a:	b480      	push	{r7}
 800946c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800946e:	e7fe      	b.n	800946e <BusFault_Handler+0x4>

08009470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009474:	e7fe      	b.n	8009474 <UsageFault_Handler+0x4>

08009476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009476:	b480      	push	{r7}
 8009478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800947a:	bf00      	nop
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009488:	bf00      	nop
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009492:	b480      	push	{r7}
 8009494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009496:	bf00      	nop
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80094a4:	f000 f8ca 	bl	800963c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80094a8:	bf00      	nop
 80094aa:	bd80      	pop	{r7, pc}

080094ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80094b4:	4a14      	ldr	r2, [pc, #80]	; (8009508 <_sbrk+0x5c>)
 80094b6:	4b15      	ldr	r3, [pc, #84]	; (800950c <_sbrk+0x60>)
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80094c0:	4b13      	ldr	r3, [pc, #76]	; (8009510 <_sbrk+0x64>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80094c8:	4b11      	ldr	r3, [pc, #68]	; (8009510 <_sbrk+0x64>)
 80094ca:	4a12      	ldr	r2, [pc, #72]	; (8009514 <_sbrk+0x68>)
 80094cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80094ce:	4b10      	ldr	r3, [pc, #64]	; (8009510 <_sbrk+0x64>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4413      	add	r3, r2
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d207      	bcs.n	80094ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80094dc:	f001 ffa6 	bl	800b42c <__errno>
 80094e0:	4603      	mov	r3, r0
 80094e2:	220c      	movs	r2, #12
 80094e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80094e6:	f04f 33ff 	mov.w	r3, #4294967295
 80094ea:	e009      	b.n	8009500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80094ec:	4b08      	ldr	r3, [pc, #32]	; (8009510 <_sbrk+0x64>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80094f2:	4b07      	ldr	r3, [pc, #28]	; (8009510 <_sbrk+0x64>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4413      	add	r3, r2
 80094fa:	4a05      	ldr	r2, [pc, #20]	; (8009510 <_sbrk+0x64>)
 80094fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80094fe:	68fb      	ldr	r3, [r7, #12]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20020000 	.word	0x20020000
 800950c:	00000400 	.word	0x00000400
 8009510:	20000098 	.word	0x20000098
 8009514:	20000278 	.word	0x20000278

08009518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009518:	b480      	push	{r7}
 800951a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800951c:	4b08      	ldr	r3, [pc, #32]	; (8009540 <SystemInit+0x28>)
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009522:	4a07      	ldr	r2, [pc, #28]	; (8009540 <SystemInit+0x28>)
 8009524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800952c:	4b04      	ldr	r3, [pc, #16]	; (8009540 <SystemInit+0x28>)
 800952e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009532:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009534:	bf00      	nop
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	e000ed00 	.word	0xe000ed00

08009544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800957c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009548:	480d      	ldr	r0, [pc, #52]	; (8009580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800954a:	490e      	ldr	r1, [pc, #56]	; (8009584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800954c:	4a0e      	ldr	r2, [pc, #56]	; (8009588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800954e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009550:	e002      	b.n	8009558 <LoopCopyDataInit>

08009552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009556:	3304      	adds	r3, #4

08009558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800955a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800955c:	d3f9      	bcc.n	8009552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800955e:	4a0b      	ldr	r2, [pc, #44]	; (800958c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009560:	4c0b      	ldr	r4, [pc, #44]	; (8009590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8009562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009564:	e001      	b.n	800956a <LoopFillZerobss>

08009566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009568:	3204      	adds	r2, #4

0800956a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800956a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800956c:	d3fb      	bcc.n	8009566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800956e:	f7ff ffd3 	bl	8009518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009572:	f001 ff61 	bl	800b438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009576:	f7ff fd1d 	bl	8008fb4 <main>
  bx  lr    
 800957a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800957c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009584:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8009588:	0800c074 	.word	0x0800c074
  ldr r2, =_sbss
 800958c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8009590:	20000274 	.word	0x20000274

08009594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009594:	e7fe      	b.n	8009594 <ADC_IRQHandler>
	...

08009598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800959c:	4b0e      	ldr	r3, [pc, #56]	; (80095d8 <HAL_Init+0x40>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a0d      	ldr	r2, [pc, #52]	; (80095d8 <HAL_Init+0x40>)
 80095a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80095a8:	4b0b      	ldr	r3, [pc, #44]	; (80095d8 <HAL_Init+0x40>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a0a      	ldr	r2, [pc, #40]	; (80095d8 <HAL_Init+0x40>)
 80095ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80095b4:	4b08      	ldr	r3, [pc, #32]	; (80095d8 <HAL_Init+0x40>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a07      	ldr	r2, [pc, #28]	; (80095d8 <HAL_Init+0x40>)
 80095ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80095c0:	2003      	movs	r0, #3
 80095c2:	f000 f931 	bl	8009828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80095c6:	200f      	movs	r0, #15
 80095c8:	f000 f808 	bl	80095dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80095cc:	f7ff fe7a 	bl	80092c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	40023c00 	.word	0x40023c00

080095dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80095e4:	4b12      	ldr	r3, [pc, #72]	; (8009630 <HAL_InitTick+0x54>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	4b12      	ldr	r3, [pc, #72]	; (8009634 <HAL_InitTick+0x58>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	4619      	mov	r1, r3
 80095ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80095f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f93b 	bl	8009876 <HAL_SYSTICK_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e00e      	b.n	8009628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b0f      	cmp	r3, #15
 800960e:	d80a      	bhi.n	8009626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009610:	2200      	movs	r2, #0
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	f04f 30ff 	mov.w	r0, #4294967295
 8009618:	f000 f911 	bl	800983e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800961c:	4a06      	ldr	r2, [pc, #24]	; (8009638 <HAL_InitTick+0x5c>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	e000      	b.n	8009628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	2000000c 	.word	0x2000000c
 8009634:	20000014 	.word	0x20000014
 8009638:	20000010 	.word	0x20000010

0800963c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009640:	4b06      	ldr	r3, [pc, #24]	; (800965c <HAL_IncTick+0x20>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	4b06      	ldr	r3, [pc, #24]	; (8009660 <HAL_IncTick+0x24>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4413      	add	r3, r2
 800964c:	4a04      	ldr	r2, [pc, #16]	; (8009660 <HAL_IncTick+0x24>)
 800964e:	6013      	str	r3, [r2, #0]
}
 8009650:	bf00      	nop
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	20000014 	.word	0x20000014
 8009660:	20000240 	.word	0x20000240

08009664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009664:	b480      	push	{r7}
 8009666:	af00      	add	r7, sp, #0
  return uwTick;
 8009668:	4b03      	ldr	r3, [pc, #12]	; (8009678 <HAL_GetTick+0x14>)
 800966a:	681b      	ldr	r3, [r3, #0]
}
 800966c:	4618      	mov	r0, r3
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000240 	.word	0x20000240

0800967c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009684:	f7ff ffee 	bl	8009664 <HAL_GetTick>
 8009688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009694:	d005      	beq.n	80096a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009696:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <HAL_Delay+0x44>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80096a2:	bf00      	nop
 80096a4:	f7ff ffde 	bl	8009664 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d8f7      	bhi.n	80096a4 <HAL_Delay+0x28>
  {
  }
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000014 	.word	0x20000014

080096c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096d4:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <__NVIC_SetPriorityGrouping+0x44>)
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80096e0:	4013      	ands	r3, r2
 80096e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80096f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096f6:	4a04      	ldr	r2, [pc, #16]	; (8009708 <__NVIC_SetPriorityGrouping+0x44>)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	60d3      	str	r3, [r2, #12]
}
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	e000ed00 	.word	0xe000ed00

0800970c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009710:	4b04      	ldr	r3, [pc, #16]	; (8009724 <__NVIC_GetPriorityGrouping+0x18>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	0a1b      	lsrs	r3, r3, #8
 8009716:	f003 0307 	and.w	r3, r3, #7
}
 800971a:	4618      	mov	r0, r3
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	e000ed00 	.word	0xe000ed00

08009728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009738:	2b00      	cmp	r3, #0
 800973a:	db0a      	blt.n	8009752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	b2da      	uxtb	r2, r3
 8009740:	490c      	ldr	r1, [pc, #48]	; (8009774 <__NVIC_SetPriority+0x4c>)
 8009742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009746:	0112      	lsls	r2, r2, #4
 8009748:	b2d2      	uxtb	r2, r2
 800974a:	440b      	add	r3, r1
 800974c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009750:	e00a      	b.n	8009768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	b2da      	uxtb	r2, r3
 8009756:	4908      	ldr	r1, [pc, #32]	; (8009778 <__NVIC_SetPriority+0x50>)
 8009758:	79fb      	ldrb	r3, [r7, #7]
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	3b04      	subs	r3, #4
 8009760:	0112      	lsls	r2, r2, #4
 8009762:	b2d2      	uxtb	r2, r2
 8009764:	440b      	add	r3, r1
 8009766:	761a      	strb	r2, [r3, #24]
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	e000e100 	.word	0xe000e100
 8009778:	e000ed00 	.word	0xe000ed00

0800977c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800977c:	b480      	push	{r7}
 800977e:	b089      	sub	sp, #36	; 0x24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f1c3 0307 	rsb	r3, r3, #7
 8009796:	2b04      	cmp	r3, #4
 8009798:	bf28      	it	cs
 800979a:	2304      	movcs	r3, #4
 800979c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	3304      	adds	r3, #4
 80097a2:	2b06      	cmp	r3, #6
 80097a4:	d902      	bls.n	80097ac <NVIC_EncodePriority+0x30>
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	3b03      	subs	r3, #3
 80097aa:	e000      	b.n	80097ae <NVIC_EncodePriority+0x32>
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ba:	43da      	mvns	r2, r3
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	401a      	ands	r2, r3
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097c4:	f04f 31ff 	mov.w	r1, #4294967295
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	fa01 f303 	lsl.w	r3, r1, r3
 80097ce:	43d9      	mvns	r1, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097d4:	4313      	orrs	r3, r2
         );
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3724      	adds	r7, #36	; 0x24
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
	...

080097e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097f4:	d301      	bcc.n	80097fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80097f6:	2301      	movs	r3, #1
 80097f8:	e00f      	b.n	800981a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80097fa:	4a0a      	ldr	r2, [pc, #40]	; (8009824 <SysTick_Config+0x40>)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3b01      	subs	r3, #1
 8009800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009802:	210f      	movs	r1, #15
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	f7ff ff8e 	bl	8009728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <SysTick_Config+0x40>)
 800980e:	2200      	movs	r2, #0
 8009810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009812:	4b04      	ldr	r3, [pc, #16]	; (8009824 <SysTick_Config+0x40>)
 8009814:	2207      	movs	r2, #7
 8009816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	e000e010 	.word	0xe000e010

08009828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7ff ff47 	bl	80096c4 <__NVIC_SetPriorityGrouping>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	4603      	mov	r3, r0
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	607a      	str	r2, [r7, #4]
 800984a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009850:	f7ff ff5c 	bl	800970c <__NVIC_GetPriorityGrouping>
 8009854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	6978      	ldr	r0, [r7, #20]
 800985c:	f7ff ff8e 	bl	800977c <NVIC_EncodePriority>
 8009860:	4602      	mov	r2, r0
 8009862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009866:	4611      	mov	r1, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff ff5d 	bl	8009728 <__NVIC_SetPriority>
}
 800986e:	bf00      	nop
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7ff ffb0 	bl	80097e4 <SysTick_Config>
 8009884:	4603      	mov	r3, r0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e00e      	b.n	80098be <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	795b      	ldrb	r3, [r3, #5]
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d105      	bne.n	80098b6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff fd2f 	bl	8009314 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b087      	sub	sp, #28
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80098d2:	2300      	movs	r3, #0
 80098d4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2202      	movs	r2, #2
 80098da:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80098dc:	2300      	movs	r3, #0
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	e00a      	b.n	80098f8 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	441a      	add	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6812      	ldr	r2, [r2, #0]
 80098f0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	3301      	adds	r3, #1
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d3f0      	bcc.n	80098e2 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2201      	movs	r2, #1
 800990c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800990e:	693b      	ldr	r3, [r7, #16]
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800992e:	4b23      	ldr	r3, [pc, #140]	; (80099bc <HAL_FLASH_Program+0xa0>)
 8009930:	7e1b      	ldrb	r3, [r3, #24]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HAL_FLASH_Program+0x1e>
 8009936:	2302      	movs	r3, #2
 8009938:	e03b      	b.n	80099b2 <HAL_FLASH_Program+0x96>
 800993a:	4b20      	ldr	r3, [pc, #128]	; (80099bc <HAL_FLASH_Program+0xa0>)
 800993c:	2201      	movs	r2, #1
 800993e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009940:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009944:	f000 f89c 	bl	8009a80 <FLASH_WaitForLastOperation>
 8009948:	4603      	mov	r3, r0
 800994a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800994c:	7dfb      	ldrb	r3, [r7, #23]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d12b      	bne.n	80099aa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d105      	bne.n	8009964 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009958:	783b      	ldrb	r3, [r7, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	68b8      	ldr	r0, [r7, #8]
 800995e:	f000 f947 	bl	8009bf0 <FLASH_Program_Byte>
 8009962:	e016      	b.n	8009992 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d105      	bne.n	8009976 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800996a:	883b      	ldrh	r3, [r7, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	68b8      	ldr	r0, [r7, #8]
 8009970:	f000 f91a 	bl	8009ba8 <FLASH_Program_HalfWord>
 8009974:	e00d      	b.n	8009992 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d105      	bne.n	8009988 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	4619      	mov	r1, r3
 8009980:	68b8      	ldr	r0, [r7, #8]
 8009982:	f000 f8ef 	bl	8009b64 <FLASH_Program_Word>
 8009986:	e004      	b.n	8009992 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800998c:	68b8      	ldr	r0, [r7, #8]
 800998e:	f000 f8b7 	bl	8009b00 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009992:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009996:	f000 f873 	bl	8009a80 <FLASH_WaitForLastOperation>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800999e:	4b08      	ldr	r3, [pc, #32]	; (80099c0 <HAL_FLASH_Program+0xa4>)
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	4a07      	ldr	r2, [pc, #28]	; (80099c0 <HAL_FLASH_Program+0xa4>)
 80099a4:	f023 0301 	bic.w	r3, r3, #1
 80099a8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80099aa:	4b04      	ldr	r3, [pc, #16]	; (80099bc <HAL_FLASH_Program+0xa0>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	761a      	strb	r2, [r3, #24]
  
  return status;
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20000244 	.word	0x20000244
 80099c0:	40023c00 	.word	0x40023c00

080099c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80099ce:	4b0b      	ldr	r3, [pc, #44]	; (80099fc <HAL_FLASH_Unlock+0x38>)
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	da0b      	bge.n	80099ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80099d6:	4b09      	ldr	r3, [pc, #36]	; (80099fc <HAL_FLASH_Unlock+0x38>)
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <HAL_FLASH_Unlock+0x3c>)
 80099da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80099dc:	4b07      	ldr	r3, [pc, #28]	; (80099fc <HAL_FLASH_Unlock+0x38>)
 80099de:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <HAL_FLASH_Unlock+0x40>)
 80099e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80099e2:	4b06      	ldr	r3, [pc, #24]	; (80099fc <HAL_FLASH_Unlock+0x38>)
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da01      	bge.n	80099ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80099ee:	79fb      	ldrb	r3, [r7, #7]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	40023c00 	.word	0x40023c00
 8009a00:	45670123 	.word	0x45670123
 8009a04:	cdef89ab 	.word	0xcdef89ab

08009a08 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009a0c:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <HAL_FLASH_Lock+0x1c>)
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	4a04      	ldr	r2, [pc, #16]	; (8009a24 <HAL_FLASH_Lock+0x1c>)
 8009a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a16:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40023c00 	.word	0x40023c00

08009a28 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8009a2c:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <HAL_FLASH_OB_Unlock+0x2c>)
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d007      	beq.n	8009a48 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8009a38:	4b06      	ldr	r3, [pc, #24]	; (8009a54 <HAL_FLASH_OB_Unlock+0x2c>)
 8009a3a:	4a07      	ldr	r2, [pc, #28]	; (8009a58 <HAL_FLASH_OB_Unlock+0x30>)
 8009a3c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8009a3e:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <HAL_FLASH_OB_Unlock+0x2c>)
 8009a40:	4a06      	ldr	r2, [pc, #24]	; (8009a5c <HAL_FLASH_OB_Unlock+0x34>)
 8009a42:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8009a44:	2300      	movs	r3, #0
 8009a46:	e000      	b.n	8009a4a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	40023c00 	.word	0x40023c00
 8009a58:	08192a3b 	.word	0x08192a3b
 8009a5c:	4c5d6e7f 	.word	0x4c5d6e7f

08009a60 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8009a64:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <HAL_FLASH_OB_Lock+0x1c>)
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	4a04      	ldr	r2, [pc, #16]	; (8009a7c <HAL_FLASH_OB_Lock+0x1c>)
 8009a6a:	f043 0301 	orr.w	r3, r3, #1
 8009a6e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	40023c00 	.word	0x40023c00

08009a80 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009a8c:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <FLASH_WaitForLastOperation+0x78>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009a92:	f7ff fde7 	bl	8009664 <HAL_GetTick>
 8009a96:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009a98:	e010      	b.n	8009abc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa0:	d00c      	beq.n	8009abc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d007      	beq.n	8009ab8 <FLASH_WaitForLastOperation+0x38>
 8009aa8:	f7ff fddc 	bl	8009664 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d201      	bcs.n	8009abc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e019      	b.n	8009af0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009abc:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <FLASH_WaitForLastOperation+0x7c>)
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e8      	bne.n	8009a9a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009ac8:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <FLASH_WaitForLastOperation+0x7c>)
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009ad4:	4b09      	ldr	r3, [pc, #36]	; (8009afc <FLASH_WaitForLastOperation+0x7c>)
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009ada:	4b08      	ldr	r3, [pc, #32]	; (8009afc <FLASH_WaitForLastOperation+0x7c>)
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009ae6:	f000 f8a5 	bl	8009c34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
  
}  
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20000244 	.word	0x20000244
 8009afc:	40023c00 	.word	0x40023c00

08009b00 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009b0c:	4b14      	ldr	r3, [pc, #80]	; (8009b60 <FLASH_Program_DoubleWord+0x60>)
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	4a13      	ldr	r2, [pc, #76]	; (8009b60 <FLASH_Program_DoubleWord+0x60>)
 8009b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009b18:	4b11      	ldr	r3, [pc, #68]	; (8009b60 <FLASH_Program_DoubleWord+0x60>)
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	4a10      	ldr	r2, [pc, #64]	; (8009b60 <FLASH_Program_DoubleWord+0x60>)
 8009b1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009b24:	4b0e      	ldr	r3, [pc, #56]	; (8009b60 <FLASH_Program_DoubleWord+0x60>)
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	4a0d      	ldr	r2, [pc, #52]	; (8009b60 <FLASH_Program_DoubleWord+0x60>)
 8009b2a:	f043 0301 	orr.w	r3, r3, #1
 8009b2e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8009b36:	f3bf 8f6f 	isb	sy
}
 8009b3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	000a      	movs	r2, r1
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	68f9      	ldr	r1, [r7, #12]
 8009b4e:	3104      	adds	r1, #4
 8009b50:	4613      	mov	r3, r2
 8009b52:	600b      	str	r3, [r1, #0]
}
 8009b54:	bf00      	nop
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	40023c00 	.word	0x40023c00

08009b64 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009b6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <FLASH_Program_Word+0x40>)
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	4a0c      	ldr	r2, [pc, #48]	; (8009ba4 <FLASH_Program_Word+0x40>)
 8009b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <FLASH_Program_Word+0x40>)
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <FLASH_Program_Word+0x40>)
 8009b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009b86:	4b07      	ldr	r3, [pc, #28]	; (8009ba4 <FLASH_Program_Word+0x40>)
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	4a06      	ldr	r2, [pc, #24]	; (8009ba4 <FLASH_Program_Word+0x40>)
 8009b8c:	f043 0301 	orr.w	r3, r3, #1
 8009b90:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	601a      	str	r2, [r3, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	40023c00 	.word	0x40023c00

08009ba8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009bb4:	4b0d      	ldr	r3, [pc, #52]	; (8009bec <FLASH_Program_HalfWord+0x44>)
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	4a0c      	ldr	r2, [pc, #48]	; (8009bec <FLASH_Program_HalfWord+0x44>)
 8009bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <FLASH_Program_HalfWord+0x44>)
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	4a09      	ldr	r2, [pc, #36]	; (8009bec <FLASH_Program_HalfWord+0x44>)
 8009bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009bcc:	4b07      	ldr	r3, [pc, #28]	; (8009bec <FLASH_Program_HalfWord+0x44>)
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	4a06      	ldr	r2, [pc, #24]	; (8009bec <FLASH_Program_HalfWord+0x44>)
 8009bd2:	f043 0301 	orr.w	r3, r3, #1
 8009bd6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	887a      	ldrh	r2, [r7, #2]
 8009bdc:	801a      	strh	r2, [r3, #0]
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	40023c00 	.word	0x40023c00

08009bf0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009bfc:	4b0c      	ldr	r3, [pc, #48]	; (8009c30 <FLASH_Program_Byte+0x40>)
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	4a0b      	ldr	r2, [pc, #44]	; (8009c30 <FLASH_Program_Byte+0x40>)
 8009c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009c08:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <FLASH_Program_Byte+0x40>)
 8009c0a:	4a09      	ldr	r2, [pc, #36]	; (8009c30 <FLASH_Program_Byte+0x40>)
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009c10:	4b07      	ldr	r3, [pc, #28]	; (8009c30 <FLASH_Program_Byte+0x40>)
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	4a06      	ldr	r2, [pc, #24]	; (8009c30 <FLASH_Program_Byte+0x40>)
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	701a      	strb	r2, [r3, #0]
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	40023c00 	.word	0x40023c00

08009c34 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009c38:	4b27      	ldr	r3, [pc, #156]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f003 0310 	and.w	r3, r3, #16
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d008      	beq.n	8009c56 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009c44:	4b25      	ldr	r3, [pc, #148]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f043 0310 	orr.w	r3, r3, #16
 8009c4c:	4a23      	ldr	r2, [pc, #140]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009c4e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009c50:	4b21      	ldr	r3, [pc, #132]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009c52:	2210      	movs	r2, #16
 8009c54:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009c56:	4b20      	ldr	r3, [pc, #128]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d008      	beq.n	8009c74 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009c62:	4b1e      	ldr	r3, [pc, #120]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	f043 0308 	orr.w	r3, r3, #8
 8009c6a:	4a1c      	ldr	r2, [pc, #112]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009c6c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009c6e:	4b1a      	ldr	r3, [pc, #104]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009c70:	2220      	movs	r2, #32
 8009c72:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009c74:	4b18      	ldr	r3, [pc, #96]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d008      	beq.n	8009c92 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009c80:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	f043 0304 	orr.w	r3, r3, #4
 8009c88:	4a14      	ldr	r2, [pc, #80]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009c8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009c8c:	4b12      	ldr	r3, [pc, #72]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009c8e:	2240      	movs	r2, #64	; 0x40
 8009c90:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009c92:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d008      	beq.n	8009cb0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009c9e:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f043 0302 	orr.w	r3, r3, #2
 8009ca6:	4a0d      	ldr	r2, [pc, #52]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009ca8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009caa:	4b0b      	ldr	r3, [pc, #44]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009cac:	2280      	movs	r2, #128	; 0x80
 8009cae:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d008      	beq.n	8009cce <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009cbc:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	f043 0320 	orr.w	r3, r3, #32
 8009cc4:	4a05      	ldr	r2, [pc, #20]	; (8009cdc <FLASH_SetErrorCode+0xa8>)
 8009cc6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009cc8:	4b03      	ldr	r3, [pc, #12]	; (8009cd8 <FLASH_SetErrorCode+0xa4>)
 8009cca:	2202      	movs	r2, #2
 8009ccc:	60da      	str	r2, [r3, #12]
  }
}
 8009cce:	bf00      	nop
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	40023c00 	.word	0x40023c00
 8009cdc:	20000244 	.word	0x20000244

08009ce0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009cf2:	4b31      	ldr	r3, [pc, #196]	; (8009db8 <HAL_FLASHEx_Erase+0xd8>)
 8009cf4:	7e1b      	ldrb	r3, [r3, #24]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d101      	bne.n	8009cfe <HAL_FLASHEx_Erase+0x1e>
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	e058      	b.n	8009db0 <HAL_FLASHEx_Erase+0xd0>
 8009cfe:	4b2e      	ldr	r3, [pc, #184]	; (8009db8 <HAL_FLASHEx_Erase+0xd8>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d08:	f7ff feba 	bl	8009a80 <FLASH_WaitForLastOperation>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d148      	bne.n	8009da8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d115      	bne.n	8009d52 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	4619      	mov	r1, r3
 8009d32:	4610      	mov	r0, r2
 8009d34:	f000 f868 	bl	8009e08 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d3c:	f7ff fea0 	bl	8009a80 <FLASH_WaitForLastOperation>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8009d44:	4b1d      	ldr	r3, [pc, #116]	; (8009dbc <HAL_FLASHEx_Erase+0xdc>)
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	4a1c      	ldr	r2, [pc, #112]	; (8009dbc <HAL_FLASHEx_Erase+0xdc>)
 8009d4a:	f023 0304 	bic.w	r3, r3, #4
 8009d4e:	6113      	str	r3, [r2, #16]
 8009d50:	e028      	b.n	8009da4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	60bb      	str	r3, [r7, #8]
 8009d58:	e01c      	b.n	8009d94 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	4619      	mov	r1, r3
 8009d62:	68b8      	ldr	r0, [r7, #8]
 8009d64:	f000 f874 	bl	8009e50 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d6c:	f7ff fe88 	bl	8009a80 <FLASH_WaitForLastOperation>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009d74:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <HAL_FLASHEx_Erase+0xdc>)
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	4a10      	ldr	r2, [pc, #64]	; (8009dbc <HAL_FLASHEx_Erase+0xdc>)
 8009d7a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8009d7e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	601a      	str	r2, [r3, #0]
          break;
 8009d8c:	e00a      	b.n	8009da4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	3301      	adds	r3, #1
 8009d92:	60bb      	str	r3, [r7, #8]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68da      	ldr	r2, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d3da      	bcc.n	8009d5a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009da4:	f000 f8e8 	bl	8009f78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009da8:	4b03      	ldr	r3, [pc, #12]	; (8009db8 <HAL_FLASHEx_Erase+0xd8>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	761a      	strb	r2, [r3, #24]

  return status;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000244 	.word	0x20000244
 8009dbc:	40023c00 	.word	0x40023c00

08009dc0 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	220f      	movs	r2, #15
 8009dcc:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8009dce:	f000 f897 	bl	8009f00 <FLASH_OB_GetWRP>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8009dda:	f000 f89d 	bl	8009f18 <FLASH_OB_GetRDP>
 8009dde:	4603      	mov	r3, r0
 8009de0:	461a      	mov	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8009de6:	f000 f87b 	bl	8009ee0 <FLASH_OB_GetUser>
 8009dea:	4603      	mov	r3, r0
 8009dec:	461a      	mov	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8009df2:	f000 f8b1 	bl	8009f58 <FLASH_OB_GetBOR>
 8009df6:	4603      	mov	r3, r0
 8009df8:	461a      	mov	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	615a      	str	r2, [r3, #20]
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	6039      	str	r1, [r7, #0]
 8009e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009e14:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <FLASH_MassErase+0x44>)
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	4a0c      	ldr	r2, [pc, #48]	; (8009e4c <FLASH_MassErase+0x44>)
 8009e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009e20:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <FLASH_MassErase+0x44>)
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	4a09      	ldr	r2, [pc, #36]	; (8009e4c <FLASH_MassErase+0x44>)
 8009e26:	f043 0304 	orr.w	r3, r3, #4
 8009e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8009e2c:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <FLASH_MassErase+0x44>)
 8009e2e:	691a      	ldr	r2, [r3, #16]
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	4313      	orrs	r3, r2
 8009e36:	4a05      	ldr	r2, [pc, #20]	; (8009e4c <FLASH_MassErase+0x44>)
 8009e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e3c:	6113      	str	r3, [r2, #16]
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	40023c00 	.word	0x40023c00

08009e50 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d102      	bne.n	8009e6c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	e010      	b.n	8009e8e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009e6c:	78fb      	ldrb	r3, [r7, #3]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d103      	bne.n	8009e7a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	e009      	b.n	8009e8e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d103      	bne.n	8009e88 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	e002      	b.n	8009e8e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009e88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e8c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009e8e:	4b13      	ldr	r3, [pc, #76]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	4a12      	ldr	r2, [pc, #72]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009e9a:	4b10      	ldr	r3, [pc, #64]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	490f      	ldr	r1, [pc, #60]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009ea6:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	4a0c      	ldr	r2, [pc, #48]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009eac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009eb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009eb2:	4b0a      	ldr	r3, [pc, #40]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009eb4:	691a      	ldr	r2, [r3, #16]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	4a07      	ldr	r2, [pc, #28]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009ebe:	f043 0302 	orr.w	r3, r3, #2
 8009ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	4a04      	ldr	r2, [pc, #16]	; (8009edc <FLASH_Erase_Sector+0x8c>)
 8009eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ece:	6113      	str	r3, [r2, #16]
}
 8009ed0:	bf00      	nop
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	40023c00 	.word	0x40023c00

08009ee0 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <FLASH_OB_GetUser+0x1c>)
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f023 031f 	bic.w	r3, r3, #31
 8009eee:	b2db      	uxtb	r3, r3
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	40023c00 	.word	0x40023c00

08009f00 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8009f00:	b480      	push	{r7}
 8009f02:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8009f04:	4b03      	ldr	r3, [pc, #12]	; (8009f14 <FLASH_OB_GetWRP+0x14>)
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	40023c16 	.word	0x40023c16

08009f18 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8009f1e:	23aa      	movs	r3, #170	; 0xaa
 8009f20:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8009f22:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <FLASH_OB_GetRDP+0x3c>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2bcc      	cmp	r3, #204	; 0xcc
 8009f2a:	d102      	bne.n	8009f32 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8009f2c:	23cc      	movs	r3, #204	; 0xcc
 8009f2e:	71fb      	strb	r3, [r7, #7]
 8009f30:	e009      	b.n	8009f46 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8009f32:	4b08      	ldr	r3, [pc, #32]	; (8009f54 <FLASH_OB_GetRDP+0x3c>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2baa      	cmp	r3, #170	; 0xaa
 8009f3a:	d102      	bne.n	8009f42 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8009f3c:	23aa      	movs	r3, #170	; 0xaa
 8009f3e:	71fb      	strb	r3, [r7, #7]
 8009f40:	e001      	b.n	8009f46 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8009f42:	2355      	movs	r3, #85	; 0x55
 8009f44:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8009f46:	79fb      	ldrb	r3, [r7, #7]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	40023c15 	.word	0x40023c15

08009f58 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8009f5c:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <FLASH_OB_GetBOR+0x1c>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 030c 	and.w	r3, r3, #12
 8009f66:	b2db      	uxtb	r3, r3
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	40023c14 	.word	0x40023c14

08009f78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009f7c:	4b20      	ldr	r3, [pc, #128]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d017      	beq.n	8009fb8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009f88:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a1c      	ldr	r2, [pc, #112]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009f8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009f94:	4b1a      	ldr	r3, [pc, #104]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a19      	ldr	r2, [pc, #100]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	4b17      	ldr	r3, [pc, #92]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a16      	ldr	r2, [pc, #88]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009faa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009fac:	4b14      	ldr	r3, [pc, #80]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a13      	ldr	r2, [pc, #76]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009fb6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009fb8:	4b11      	ldr	r3, [pc, #68]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d017      	beq.n	8009ff4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009fc4:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a0d      	ldr	r2, [pc, #52]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a0a      	ldr	r2, [pc, #40]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	4b08      	ldr	r3, [pc, #32]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a07      	ldr	r2, [pc, #28]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fe6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a04      	ldr	r2, [pc, #16]	; (800a000 <FLASH_FlushCaches+0x88>)
 8009fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ff2:	6013      	str	r3, [r2, #0]
  }
}
 8009ff4:	bf00      	nop
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	40023c00 	.word	0x40023c00

0800a004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a004:	b480      	push	{r7}
 800a006:	b089      	sub	sp, #36	; 0x24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a00e:	2300      	movs	r3, #0
 800a010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a016:	2300      	movs	r3, #0
 800a018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a01a:	2300      	movs	r3, #0
 800a01c:	61fb      	str	r3, [r7, #28]
 800a01e:	e16b      	b.n	800a2f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a020:	2201      	movs	r2, #1
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	fa02 f303 	lsl.w	r3, r2, r3
 800a028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	4013      	ands	r3, r2
 800a032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	429a      	cmp	r2, r3
 800a03a:	f040 815a 	bne.w	800a2f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	2b01      	cmp	r3, #1
 800a048:	d005      	beq.n	800a056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a052:	2b02      	cmp	r3, #2
 800a054:	d130      	bne.n	800a0b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	2203      	movs	r2, #3
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	43db      	mvns	r3, r3
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	4013      	ands	r3, r2
 800a06c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	fa02 f303 	lsl.w	r3, r2, r3
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a08c:	2201      	movs	r2, #1
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	fa02 f303 	lsl.w	r3, r2, r3
 800a094:	43db      	mvns	r3, r3
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	4013      	ands	r3, r2
 800a09a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	091b      	lsrs	r3, r3, #4
 800a0a2:	f003 0201 	and.w	r2, r3, #1
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	69ba      	ldr	r2, [r7, #24]
 800a0b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d017      	beq.n	800a0f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	005b      	lsls	r3, r3, #1
 800a0ce:	2203      	movs	r2, #3
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	43db      	mvns	r3, r3
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	4013      	ands	r3, r2
 800a0da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f003 0303 	and.w	r3, r3, #3
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d123      	bne.n	800a148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	08da      	lsrs	r2, r3, #3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	3208      	adds	r2, #8
 800a108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	f003 0307 	and.w	r3, r3, #7
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	220f      	movs	r2, #15
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	43db      	mvns	r3, r3
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	4013      	ands	r3, r2
 800a122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	691a      	ldr	r2, [r3, #16]
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	f003 0307 	and.w	r3, r3, #7
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	fa02 f303 	lsl.w	r3, r2, r3
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	4313      	orrs	r3, r2
 800a138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	08da      	lsrs	r2, r3, #3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3208      	adds	r2, #8
 800a142:	69b9      	ldr	r1, [r7, #24]
 800a144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	2203      	movs	r2, #3
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	43db      	mvns	r3, r3
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	4013      	ands	r3, r2
 800a15e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f003 0203 	and.w	r2, r3, #3
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	fa02 f303 	lsl.w	r3, r2, r3
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	4313      	orrs	r3, r2
 800a174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	69ba      	ldr	r2, [r7, #24]
 800a17a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 80b4 	beq.w	800a2f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a18a:	2300      	movs	r3, #0
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	4b60      	ldr	r3, [pc, #384]	; (800a310 <HAL_GPIO_Init+0x30c>)
 800a190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a192:	4a5f      	ldr	r2, [pc, #380]	; (800a310 <HAL_GPIO_Init+0x30c>)
 800a194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a198:	6453      	str	r3, [r2, #68]	; 0x44
 800a19a:	4b5d      	ldr	r3, [pc, #372]	; (800a310 <HAL_GPIO_Init+0x30c>)
 800a19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a19e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a1a6:	4a5b      	ldr	r2, [pc, #364]	; (800a314 <HAL_GPIO_Init+0x310>)
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	089b      	lsrs	r3, r3, #2
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	220f      	movs	r2, #15
 800a1be:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a52      	ldr	r2, [pc, #328]	; (800a318 <HAL_GPIO_Init+0x314>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d02b      	beq.n	800a22a <HAL_GPIO_Init+0x226>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a51      	ldr	r2, [pc, #324]	; (800a31c <HAL_GPIO_Init+0x318>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d025      	beq.n	800a226 <HAL_GPIO_Init+0x222>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a50      	ldr	r2, [pc, #320]	; (800a320 <HAL_GPIO_Init+0x31c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d01f      	beq.n	800a222 <HAL_GPIO_Init+0x21e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a4f      	ldr	r2, [pc, #316]	; (800a324 <HAL_GPIO_Init+0x320>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d019      	beq.n	800a21e <HAL_GPIO_Init+0x21a>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a4e      	ldr	r2, [pc, #312]	; (800a328 <HAL_GPIO_Init+0x324>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d013      	beq.n	800a21a <HAL_GPIO_Init+0x216>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a4d      	ldr	r2, [pc, #308]	; (800a32c <HAL_GPIO_Init+0x328>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00d      	beq.n	800a216 <HAL_GPIO_Init+0x212>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a4c      	ldr	r2, [pc, #304]	; (800a330 <HAL_GPIO_Init+0x32c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d007      	beq.n	800a212 <HAL_GPIO_Init+0x20e>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a4b      	ldr	r2, [pc, #300]	; (800a334 <HAL_GPIO_Init+0x330>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d101      	bne.n	800a20e <HAL_GPIO_Init+0x20a>
 800a20a:	2307      	movs	r3, #7
 800a20c:	e00e      	b.n	800a22c <HAL_GPIO_Init+0x228>
 800a20e:	2308      	movs	r3, #8
 800a210:	e00c      	b.n	800a22c <HAL_GPIO_Init+0x228>
 800a212:	2306      	movs	r3, #6
 800a214:	e00a      	b.n	800a22c <HAL_GPIO_Init+0x228>
 800a216:	2305      	movs	r3, #5
 800a218:	e008      	b.n	800a22c <HAL_GPIO_Init+0x228>
 800a21a:	2304      	movs	r3, #4
 800a21c:	e006      	b.n	800a22c <HAL_GPIO_Init+0x228>
 800a21e:	2303      	movs	r3, #3
 800a220:	e004      	b.n	800a22c <HAL_GPIO_Init+0x228>
 800a222:	2302      	movs	r3, #2
 800a224:	e002      	b.n	800a22c <HAL_GPIO_Init+0x228>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <HAL_GPIO_Init+0x228>
 800a22a:	2300      	movs	r3, #0
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	f002 0203 	and.w	r2, r2, #3
 800a232:	0092      	lsls	r2, r2, #2
 800a234:	4093      	lsls	r3, r2
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	4313      	orrs	r3, r2
 800a23a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a23c:	4935      	ldr	r1, [pc, #212]	; (800a314 <HAL_GPIO_Init+0x310>)
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	089b      	lsrs	r3, r3, #2
 800a242:	3302      	adds	r3, #2
 800a244:	69ba      	ldr	r2, [r7, #24]
 800a246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a24a:	4b3b      	ldr	r3, [pc, #236]	; (800a338 <HAL_GPIO_Init+0x334>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	43db      	mvns	r3, r3
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	4013      	ands	r3, r2
 800a258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a26e:	4a32      	ldr	r2, [pc, #200]	; (800a338 <HAL_GPIO_Init+0x334>)
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a274:	4b30      	ldr	r3, [pc, #192]	; (800a338 <HAL_GPIO_Init+0x334>)
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	43db      	mvns	r3, r3
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	4013      	ands	r3, r2
 800a282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	4313      	orrs	r3, r2
 800a296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a298:	4a27      	ldr	r2, [pc, #156]	; (800a338 <HAL_GPIO_Init+0x334>)
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a29e:	4b26      	ldr	r3, [pc, #152]	; (800a338 <HAL_GPIO_Init+0x334>)
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	43db      	mvns	r3, r3
 800a2a8:	69ba      	ldr	r2, [r7, #24]
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a2ba:	69ba      	ldr	r2, [r7, #24]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a2c2:	4a1d      	ldr	r2, [pc, #116]	; (800a338 <HAL_GPIO_Init+0x334>)
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a2c8:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <HAL_GPIO_Init+0x334>)
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d003      	beq.n	800a2ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a2e4:	69ba      	ldr	r2, [r7, #24]
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a2ec:	4a12      	ldr	r2, [pc, #72]	; (800a338 <HAL_GPIO_Init+0x334>)
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	61fb      	str	r3, [r7, #28]
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	2b0f      	cmp	r3, #15
 800a2fc:	f67f ae90 	bls.w	800a020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	3724      	adds	r7, #36	; 0x24
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	40023800 	.word	0x40023800
 800a314:	40013800 	.word	0x40013800
 800a318:	40020000 	.word	0x40020000
 800a31c:	40020400 	.word	0x40020400
 800a320:	40020800 	.word	0x40020800
 800a324:	40020c00 	.word	0x40020c00
 800a328:	40021000 	.word	0x40021000
 800a32c:	40021400 	.word	0x40021400
 800a330:	40021800 	.word	0x40021800
 800a334:	40021c00 	.word	0x40021c00
 800a338:	40013c00 	.word	0x40013c00

0800a33c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691a      	ldr	r2, [r3, #16]
 800a34c:	887b      	ldrh	r3, [r7, #2]
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a354:	2301      	movs	r3, #1
 800a356:	73fb      	strb	r3, [r7, #15]
 800a358:	e001      	b.n	800a35e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	807b      	strh	r3, [r7, #2]
 800a378:	4613      	mov	r3, r2
 800a37a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a37c:	787b      	ldrb	r3, [r7, #1]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a382:	887a      	ldrh	r2, [r7, #2]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a388:	e003      	b.n	800a392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a38a:	887b      	ldrh	r3, [r7, #2]
 800a38c:	041a      	lsls	r2, r3, #16
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	619a      	str	r2, [r3, #24]
}
 800a392:	bf00      	nop
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b085      	sub	sp, #20
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a3b0:	887a      	ldrh	r2, [r7, #2]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	041a      	lsls	r2, r3, #16
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	43d9      	mvns	r1, r3
 800a3bc:	887b      	ldrh	r3, [r7, #2]
 800a3be:	400b      	ands	r3, r1
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	619a      	str	r2, [r3, #24]
}
 800a3c6:	bf00      	nop
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
	...

0800a3d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e264      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d075      	beq.n	800a4de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a3f2:	4ba3      	ldr	r3, [pc, #652]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	f003 030c 	and.w	r3, r3, #12
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	d00c      	beq.n	800a418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3fe:	4ba0      	ldr	r3, [pc, #640]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a406:	2b08      	cmp	r3, #8
 800a408:	d112      	bne.n	800a430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a40a:	4b9d      	ldr	r3, [pc, #628]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a416:	d10b      	bne.n	800a430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a418:	4b99      	ldr	r3, [pc, #612]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d05b      	beq.n	800a4dc <HAL_RCC_OscConfig+0x108>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d157      	bne.n	800a4dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e23f      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a438:	d106      	bne.n	800a448 <HAL_RCC_OscConfig+0x74>
 800a43a:	4b91      	ldr	r3, [pc, #580]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a90      	ldr	r2, [pc, #576]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	e01d      	b.n	800a484 <HAL_RCC_OscConfig+0xb0>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a450:	d10c      	bne.n	800a46c <HAL_RCC_OscConfig+0x98>
 800a452:	4b8b      	ldr	r3, [pc, #556]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a8a      	ldr	r2, [pc, #552]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	4b88      	ldr	r3, [pc, #544]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a87      	ldr	r2, [pc, #540]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	e00b      	b.n	800a484 <HAL_RCC_OscConfig+0xb0>
 800a46c:	4b84      	ldr	r3, [pc, #528]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a83      	ldr	r2, [pc, #524]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	4b81      	ldr	r3, [pc, #516]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a80      	ldr	r2, [pc, #512]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a47e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d013      	beq.n	800a4b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a48c:	f7ff f8ea 	bl	8009664 <HAL_GetTick>
 800a490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a492:	e008      	b.n	800a4a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a494:	f7ff f8e6 	bl	8009664 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b64      	cmp	r3, #100	; 0x64
 800a4a0:	d901      	bls.n	800a4a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e204      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4a6:	4b76      	ldr	r3, [pc, #472]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0f0      	beq.n	800a494 <HAL_RCC_OscConfig+0xc0>
 800a4b2:	e014      	b.n	800a4de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4b4:	f7ff f8d6 	bl	8009664 <HAL_GetTick>
 800a4b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4ba:	e008      	b.n	800a4ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4bc:	f7ff f8d2 	bl	8009664 <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	2b64      	cmp	r3, #100	; 0x64
 800a4c8:	d901      	bls.n	800a4ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e1f0      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4ce:	4b6c      	ldr	r3, [pc, #432]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f0      	bne.n	800a4bc <HAL_RCC_OscConfig+0xe8>
 800a4da:	e000      	b.n	800a4de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d063      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a4ea:	4b65      	ldr	r3, [pc, #404]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f003 030c 	and.w	r3, r3, #12
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00b      	beq.n	800a50e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a4f6:	4b62      	ldr	r3, [pc, #392]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a4fe:	2b08      	cmp	r3, #8
 800a500:	d11c      	bne.n	800a53c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a502:	4b5f      	ldr	r3, [pc, #380]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d116      	bne.n	800a53c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a50e:	4b5c      	ldr	r3, [pc, #368]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <HAL_RCC_OscConfig+0x152>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d001      	beq.n	800a526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e1c4      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a526:	4b56      	ldr	r3, [pc, #344]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	4952      	ldr	r1, [pc, #328]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a536:	4313      	orrs	r3, r2
 800a538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a53a:	e03a      	b.n	800a5b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d020      	beq.n	800a586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a544:	4b4f      	ldr	r3, [pc, #316]	; (800a684 <HAL_RCC_OscConfig+0x2b0>)
 800a546:	2201      	movs	r2, #1
 800a548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54a:	f7ff f88b 	bl	8009664 <HAL_GetTick>
 800a54e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a550:	e008      	b.n	800a564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a552:	f7ff f887 	bl	8009664 <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d901      	bls.n	800a564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e1a5      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a564:	4b46      	ldr	r3, [pc, #280]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0302 	and.w	r3, r3, #2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0f0      	beq.n	800a552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a570:	4b43      	ldr	r3, [pc, #268]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	00db      	lsls	r3, r3, #3
 800a57e:	4940      	ldr	r1, [pc, #256]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a580:	4313      	orrs	r3, r2
 800a582:	600b      	str	r3, [r1, #0]
 800a584:	e015      	b.n	800a5b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a586:	4b3f      	ldr	r3, [pc, #252]	; (800a684 <HAL_RCC_OscConfig+0x2b0>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58c:	f7ff f86a 	bl	8009664 <HAL_GetTick>
 800a590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a594:	f7ff f866 	bl	8009664 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e184      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5a6:	4b36      	ldr	r3, [pc, #216]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 0302 	and.w	r3, r3, #2
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1f0      	bne.n	800a594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0308 	and.w	r3, r3, #8
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d030      	beq.n	800a620 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d016      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5c6:	4b30      	ldr	r3, [pc, #192]	; (800a688 <HAL_RCC_OscConfig+0x2b4>)
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5cc:	f7ff f84a 	bl	8009664 <HAL_GetTick>
 800a5d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5d4:	f7ff f846 	bl	8009664 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e164      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5e6:	4b26      	ldr	r3, [pc, #152]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ea:	f003 0302 	and.w	r3, r3, #2
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0f0      	beq.n	800a5d4 <HAL_RCC_OscConfig+0x200>
 800a5f2:	e015      	b.n	800a620 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a5f4:	4b24      	ldr	r3, [pc, #144]	; (800a688 <HAL_RCC_OscConfig+0x2b4>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5fa:	f7ff f833 	bl	8009664 <HAL_GetTick>
 800a5fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a600:	e008      	b.n	800a614 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a602:	f7ff f82f 	bl	8009664 <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d901      	bls.n	800a614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e14d      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a614:	4b1a      	ldr	r3, [pc, #104]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a618:	f003 0302 	and.w	r3, r3, #2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f0      	bne.n	800a602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 80a0 	beq.w	800a76e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a62e:	2300      	movs	r3, #0
 800a630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a632:	4b13      	ldr	r3, [pc, #76]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10f      	bne.n	800a65e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a63e:	2300      	movs	r3, #0
 800a640:	60bb      	str	r3, [r7, #8]
 800a642:	4b0f      	ldr	r3, [pc, #60]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	4a0e      	ldr	r2, [pc, #56]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a64c:	6413      	str	r3, [r2, #64]	; 0x40
 800a64e:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <HAL_RCC_OscConfig+0x2ac>)
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a656:	60bb      	str	r3, [r7, #8]
 800a658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a65a:	2301      	movs	r3, #1
 800a65c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a65e:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <HAL_RCC_OscConfig+0x2b8>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a666:	2b00      	cmp	r3, #0
 800a668:	d121      	bne.n	800a6ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a66a:	4b08      	ldr	r3, [pc, #32]	; (800a68c <HAL_RCC_OscConfig+0x2b8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a07      	ldr	r2, [pc, #28]	; (800a68c <HAL_RCC_OscConfig+0x2b8>)
 800a670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a676:	f7fe fff5 	bl	8009664 <HAL_GetTick>
 800a67a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a67c:	e011      	b.n	800a6a2 <HAL_RCC_OscConfig+0x2ce>
 800a67e:	bf00      	nop
 800a680:	40023800 	.word	0x40023800
 800a684:	42470000 	.word	0x42470000
 800a688:	42470e80 	.word	0x42470e80
 800a68c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a690:	f7fe ffe8 	bl	8009664 <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e106      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6a2:	4b85      	ldr	r3, [pc, #532]	; (800a8b8 <HAL_RCC_OscConfig+0x4e4>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0f0      	beq.n	800a690 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d106      	bne.n	800a6c4 <HAL_RCC_OscConfig+0x2f0>
 800a6b6:	4b81      	ldr	r3, [pc, #516]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ba:	4a80      	ldr	r2, [pc, #512]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6bc:	f043 0301 	orr.w	r3, r3, #1
 800a6c0:	6713      	str	r3, [r2, #112]	; 0x70
 800a6c2:	e01c      	b.n	800a6fe <HAL_RCC_OscConfig+0x32a>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	2b05      	cmp	r3, #5
 800a6ca:	d10c      	bne.n	800a6e6 <HAL_RCC_OscConfig+0x312>
 800a6cc:	4b7b      	ldr	r3, [pc, #492]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d0:	4a7a      	ldr	r2, [pc, #488]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6d2:	f043 0304 	orr.w	r3, r3, #4
 800a6d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a6d8:	4b78      	ldr	r3, [pc, #480]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6dc:	4a77      	ldr	r2, [pc, #476]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	6713      	str	r3, [r2, #112]	; 0x70
 800a6e4:	e00b      	b.n	800a6fe <HAL_RCC_OscConfig+0x32a>
 800a6e6:	4b75      	ldr	r3, [pc, #468]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ea:	4a74      	ldr	r2, [pc, #464]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6ec:	f023 0301 	bic.w	r3, r3, #1
 800a6f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a6f2:	4b72      	ldr	r3, [pc, #456]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f6:	4a71      	ldr	r2, [pc, #452]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a6f8:	f023 0304 	bic.w	r3, r3, #4
 800a6fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d015      	beq.n	800a732 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a706:	f7fe ffad 	bl	8009664 <HAL_GetTick>
 800a70a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a70c:	e00a      	b.n	800a724 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a70e:	f7fe ffa9 	bl	8009664 <HAL_GetTick>
 800a712:	4602      	mov	r2, r0
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	f241 3288 	movw	r2, #5000	; 0x1388
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d901      	bls.n	800a724 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e0c5      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a724:	4b65      	ldr	r3, [pc, #404]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0ee      	beq.n	800a70e <HAL_RCC_OscConfig+0x33a>
 800a730:	e014      	b.n	800a75c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a732:	f7fe ff97 	bl	8009664 <HAL_GetTick>
 800a736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a738:	e00a      	b.n	800a750 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a73a:	f7fe ff93 	bl	8009664 <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	f241 3288 	movw	r2, #5000	; 0x1388
 800a748:	4293      	cmp	r3, r2
 800a74a:	d901      	bls.n	800a750 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e0af      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a750:	4b5a      	ldr	r3, [pc, #360]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1ee      	bne.n	800a73a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d105      	bne.n	800a76e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a762:	4b56      	ldr	r3, [pc, #344]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a766:	4a55      	ldr	r2, [pc, #340]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a76c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 809b 	beq.w	800a8ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a778:	4b50      	ldr	r3, [pc, #320]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f003 030c 	and.w	r3, r3, #12
 800a780:	2b08      	cmp	r3, #8
 800a782:	d05c      	beq.n	800a83e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d141      	bne.n	800a810 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a78c:	4b4c      	ldr	r3, [pc, #304]	; (800a8c0 <HAL_RCC_OscConfig+0x4ec>)
 800a78e:	2200      	movs	r2, #0
 800a790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a792:	f7fe ff67 	bl	8009664 <HAL_GetTick>
 800a796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a798:	e008      	b.n	800a7ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a79a:	f7fe ff63 	bl	8009664 <HAL_GetTick>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d901      	bls.n	800a7ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e081      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7ac:	4b43      	ldr	r3, [pc, #268]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1f0      	bne.n	800a79a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	69da      	ldr	r2, [r3, #28]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	019b      	lsls	r3, r3, #6
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ce:	085b      	lsrs	r3, r3, #1
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	041b      	lsls	r3, r3, #16
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7da:	061b      	lsls	r3, r3, #24
 800a7dc:	4937      	ldr	r1, [pc, #220]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7e2:	4b37      	ldr	r3, [pc, #220]	; (800a8c0 <HAL_RCC_OscConfig+0x4ec>)
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7e8:	f7fe ff3c 	bl	8009664 <HAL_GetTick>
 800a7ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7ee:	e008      	b.n	800a802 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7f0:	f7fe ff38 	bl	8009664 <HAL_GetTick>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d901      	bls.n	800a802 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e056      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a802:	4b2e      	ldr	r3, [pc, #184]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0f0      	beq.n	800a7f0 <HAL_RCC_OscConfig+0x41c>
 800a80e:	e04e      	b.n	800a8ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a810:	4b2b      	ldr	r3, [pc, #172]	; (800a8c0 <HAL_RCC_OscConfig+0x4ec>)
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a816:	f7fe ff25 	bl	8009664 <HAL_GetTick>
 800a81a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a81c:	e008      	b.n	800a830 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a81e:	f7fe ff21 	bl	8009664 <HAL_GetTick>
 800a822:	4602      	mov	r2, r0
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d901      	bls.n	800a830 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e03f      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a830:	4b22      	ldr	r3, [pc, #136]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f0      	bne.n	800a81e <HAL_RCC_OscConfig+0x44a>
 800a83c:	e037      	b.n	800a8ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e032      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a84a:	4b1c      	ldr	r3, [pc, #112]	; (800a8bc <HAL_RCC_OscConfig+0x4e8>)
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d028      	beq.n	800a8aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a862:	429a      	cmp	r2, r3
 800a864:	d121      	bne.n	800a8aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a870:	429a      	cmp	r2, r3
 800a872:	d11a      	bne.n	800a8aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a87a:	4013      	ands	r3, r2
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a880:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a882:	4293      	cmp	r3, r2
 800a884:	d111      	bne.n	800a8aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a890:	085b      	lsrs	r3, r3, #1
 800a892:	3b01      	subs	r3, #1
 800a894:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a896:	429a      	cmp	r2, r3
 800a898:	d107      	bne.n	800a8aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d001      	beq.n	800a8ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e000      	b.n	800a8b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3718      	adds	r7, #24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	40007000 	.word	0x40007000
 800a8bc:	40023800 	.word	0x40023800
 800a8c0:	42470060 	.word	0x42470060

0800a8c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e0cc      	b.n	800aa72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a8d8:	4b68      	ldr	r3, [pc, #416]	; (800aa7c <HAL_RCC_ClockConfig+0x1b8>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0307 	and.w	r3, r3, #7
 800a8e0:	683a      	ldr	r2, [r7, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d90c      	bls.n	800a900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8e6:	4b65      	ldr	r3, [pc, #404]	; (800aa7c <HAL_RCC_ClockConfig+0x1b8>)
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	b2d2      	uxtb	r2, r2
 800a8ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ee:	4b63      	ldr	r3, [pc, #396]	; (800aa7c <HAL_RCC_ClockConfig+0x1b8>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0307 	and.w	r3, r3, #7
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d001      	beq.n	800a900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e0b8      	b.n	800aa72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d020      	beq.n	800a94e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0304 	and.w	r3, r3, #4
 800a914:	2b00      	cmp	r3, #0
 800a916:	d005      	beq.n	800a924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a918:	4b59      	ldr	r3, [pc, #356]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	4a58      	ldr	r2, [pc, #352]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a91e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0308 	and.w	r3, r3, #8
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d005      	beq.n	800a93c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a930:	4b53      	ldr	r3, [pc, #332]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	4a52      	ldr	r2, [pc, #328]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a93a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a93c:	4b50      	ldr	r3, [pc, #320]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	494d      	ldr	r1, [pc, #308]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a94a:	4313      	orrs	r3, r2
 800a94c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d044      	beq.n	800a9e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d107      	bne.n	800a972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a962:	4b47      	ldr	r3, [pc, #284]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d119      	bne.n	800a9a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e07f      	b.n	800aa72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	2b02      	cmp	r3, #2
 800a978:	d003      	beq.n	800a982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d107      	bne.n	800a992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a982:	4b3f      	ldr	r3, [pc, #252]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e06f      	b.n	800aa72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a992:	4b3b      	ldr	r3, [pc, #236]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e067      	b.n	800aa72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9a2:	4b37      	ldr	r3, [pc, #220]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	f023 0203 	bic.w	r2, r3, #3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4934      	ldr	r1, [pc, #208]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a9b4:	f7fe fe56 	bl	8009664 <HAL_GetTick>
 800a9b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9ba:	e00a      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9bc:	f7fe fe52 	bl	8009664 <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d901      	bls.n	800a9d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e04f      	b.n	800aa72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9d2:	4b2b      	ldr	r3, [pc, #172]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	f003 020c 	and.w	r2, r3, #12
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d1eb      	bne.n	800a9bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9e4:	4b25      	ldr	r3, [pc, #148]	; (800aa7c <HAL_RCC_ClockConfig+0x1b8>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0307 	and.w	r3, r3, #7
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d20c      	bcs.n	800aa0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9f2:	4b22      	ldr	r3, [pc, #136]	; (800aa7c <HAL_RCC_ClockConfig+0x1b8>)
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	b2d2      	uxtb	r2, r2
 800a9f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9fa:	4b20      	ldr	r3, [pc, #128]	; (800aa7c <HAL_RCC_ClockConfig+0x1b8>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0307 	and.w	r3, r3, #7
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d001      	beq.n	800aa0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e032      	b.n	800aa72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d008      	beq.n	800aa2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa18:	4b19      	ldr	r3, [pc, #100]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	4916      	ldr	r1, [pc, #88]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800aa26:	4313      	orrs	r3, r2
 800aa28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0308 	and.w	r3, r3, #8
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d009      	beq.n	800aa4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa36:	4b12      	ldr	r3, [pc, #72]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	490e      	ldr	r1, [pc, #56]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa4a:	f000 f821 	bl	800aa90 <HAL_RCC_GetSysClockFreq>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	4b0b      	ldr	r3, [pc, #44]	; (800aa80 <HAL_RCC_ClockConfig+0x1bc>)
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	091b      	lsrs	r3, r3, #4
 800aa56:	f003 030f 	and.w	r3, r3, #15
 800aa5a:	490a      	ldr	r1, [pc, #40]	; (800aa84 <HAL_RCC_ClockConfig+0x1c0>)
 800aa5c:	5ccb      	ldrb	r3, [r1, r3]
 800aa5e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa62:	4a09      	ldr	r2, [pc, #36]	; (800aa88 <HAL_RCC_ClockConfig+0x1c4>)
 800aa64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <HAL_RCC_ClockConfig+0x1c8>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe fdb6 	bl	80095dc <HAL_InitTick>

  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	40023c00 	.word	0x40023c00
 800aa80:	40023800 	.word	0x40023800
 800aa84:	0800c018 	.word	0x0800c018
 800aa88:	2000000c 	.word	0x2000000c
 800aa8c:	20000010 	.word	0x20000010

0800aa90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	607b      	str	r3, [r7, #4]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aaa8:	4b67      	ldr	r3, [pc, #412]	; (800ac48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f003 030c 	and.w	r3, r3, #12
 800aab0:	2b08      	cmp	r3, #8
 800aab2:	d00d      	beq.n	800aad0 <HAL_RCC_GetSysClockFreq+0x40>
 800aab4:	2b08      	cmp	r3, #8
 800aab6:	f200 80bd 	bhi.w	800ac34 <HAL_RCC_GetSysClockFreq+0x1a4>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <HAL_RCC_GetSysClockFreq+0x34>
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d003      	beq.n	800aaca <HAL_RCC_GetSysClockFreq+0x3a>
 800aac2:	e0b7      	b.n	800ac34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aac4:	4b61      	ldr	r3, [pc, #388]	; (800ac4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800aac6:	60bb      	str	r3, [r7, #8]
       break;
 800aac8:	e0b7      	b.n	800ac3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aaca:	4b61      	ldr	r3, [pc, #388]	; (800ac50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800aacc:	60bb      	str	r3, [r7, #8]
      break;
 800aace:	e0b4      	b.n	800ac3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aad0:	4b5d      	ldr	r3, [pc, #372]	; (800ac48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aad8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aada:	4b5b      	ldr	r3, [pc, #364]	; (800ac48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d04d      	beq.n	800ab82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aae6:	4b58      	ldr	r3, [pc, #352]	; (800ac48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	099b      	lsrs	r3, r3, #6
 800aaec:	461a      	mov	r2, r3
 800aaee:	f04f 0300 	mov.w	r3, #0
 800aaf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800aaf6:	f04f 0100 	mov.w	r1, #0
 800aafa:	ea02 0800 	and.w	r8, r2, r0
 800aafe:	ea03 0901 	and.w	r9, r3, r1
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	f04f 0200 	mov.w	r2, #0
 800ab0a:	f04f 0300 	mov.w	r3, #0
 800ab0e:	014b      	lsls	r3, r1, #5
 800ab10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ab14:	0142      	lsls	r2, r0, #5
 800ab16:	4610      	mov	r0, r2
 800ab18:	4619      	mov	r1, r3
 800ab1a:	ebb0 0008 	subs.w	r0, r0, r8
 800ab1e:	eb61 0109 	sbc.w	r1, r1, r9
 800ab22:	f04f 0200 	mov.w	r2, #0
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	018b      	lsls	r3, r1, #6
 800ab2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ab30:	0182      	lsls	r2, r0, #6
 800ab32:	1a12      	subs	r2, r2, r0
 800ab34:	eb63 0301 	sbc.w	r3, r3, r1
 800ab38:	f04f 0000 	mov.w	r0, #0
 800ab3c:	f04f 0100 	mov.w	r1, #0
 800ab40:	00d9      	lsls	r1, r3, #3
 800ab42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab46:	00d0      	lsls	r0, r2, #3
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	eb12 0208 	adds.w	r2, r2, r8
 800ab50:	eb43 0309 	adc.w	r3, r3, r9
 800ab54:	f04f 0000 	mov.w	r0, #0
 800ab58:	f04f 0100 	mov.w	r1, #0
 800ab5c:	0259      	lsls	r1, r3, #9
 800ab5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800ab62:	0250      	lsls	r0, r2, #9
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4610      	mov	r0, r2
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f04f 0300 	mov.w	r3, #0
 800ab74:	f7fd fb84 	bl	8008280 <__aeabi_uldivmod>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e04a      	b.n	800ac18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab82:	4b31      	ldr	r3, [pc, #196]	; (800ac48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	099b      	lsrs	r3, r3, #6
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f04f 0300 	mov.w	r3, #0
 800ab8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ab92:	f04f 0100 	mov.w	r1, #0
 800ab96:	ea02 0400 	and.w	r4, r2, r0
 800ab9a:	ea03 0501 	and.w	r5, r3, r1
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	f04f 0200 	mov.w	r2, #0
 800aba6:	f04f 0300 	mov.w	r3, #0
 800abaa:	014b      	lsls	r3, r1, #5
 800abac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800abb0:	0142      	lsls	r2, r0, #5
 800abb2:	4610      	mov	r0, r2
 800abb4:	4619      	mov	r1, r3
 800abb6:	1b00      	subs	r0, r0, r4
 800abb8:	eb61 0105 	sbc.w	r1, r1, r5
 800abbc:	f04f 0200 	mov.w	r2, #0
 800abc0:	f04f 0300 	mov.w	r3, #0
 800abc4:	018b      	lsls	r3, r1, #6
 800abc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800abca:	0182      	lsls	r2, r0, #6
 800abcc:	1a12      	subs	r2, r2, r0
 800abce:	eb63 0301 	sbc.w	r3, r3, r1
 800abd2:	f04f 0000 	mov.w	r0, #0
 800abd6:	f04f 0100 	mov.w	r1, #0
 800abda:	00d9      	lsls	r1, r3, #3
 800abdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800abe0:	00d0      	lsls	r0, r2, #3
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	1912      	adds	r2, r2, r4
 800abe8:	eb45 0303 	adc.w	r3, r5, r3
 800abec:	f04f 0000 	mov.w	r0, #0
 800abf0:	f04f 0100 	mov.w	r1, #0
 800abf4:	0299      	lsls	r1, r3, #10
 800abf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800abfa:	0290      	lsls	r0, r2, #10
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4610      	mov	r0, r2
 800ac02:	4619      	mov	r1, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	461a      	mov	r2, r3
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	f7fd fb38 	bl	8008280 <__aeabi_uldivmod>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4613      	mov	r3, r2
 800ac16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ac18:	4b0b      	ldr	r3, [pc, #44]	; (800ac48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	0c1b      	lsrs	r3, r3, #16
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	3301      	adds	r3, #1
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac30:	60bb      	str	r3, [r7, #8]
      break;
 800ac32:	e002      	b.n	800ac3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ac36:	60bb      	str	r3, [r7, #8]
      break;
 800ac38:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac3a:	68bb      	ldr	r3, [r7, #8]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ac46:	bf00      	nop
 800ac48:	40023800 	.word	0x40023800
 800ac4c:	00f42400 	.word	0x00f42400
 800ac50:	007a1200 	.word	0x007a1200

0800ac54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac58:	4b03      	ldr	r3, [pc, #12]	; (800ac68 <HAL_RCC_GetHCLKFreq+0x14>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	2000000c 	.word	0x2000000c

0800ac6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ac70:	f7ff fff0 	bl	800ac54 <HAL_RCC_GetHCLKFreq>
 800ac74:	4602      	mov	r2, r0
 800ac76:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	0a9b      	lsrs	r3, r3, #10
 800ac7c:	f003 0307 	and.w	r3, r3, #7
 800ac80:	4903      	ldr	r1, [pc, #12]	; (800ac90 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac82:	5ccb      	ldrb	r3, [r1, r3]
 800ac84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40023800 	.word	0x40023800
 800ac90:	0800c028 	.word	0x0800c028

0800ac94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ac98:	f7ff ffdc 	bl	800ac54 <HAL_RCC_GetHCLKFreq>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	0b5b      	lsrs	r3, r3, #13
 800aca4:	f003 0307 	and.w	r3, r3, #7
 800aca8:	4903      	ldr	r1, [pc, #12]	; (800acb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800acaa:	5ccb      	ldrb	r3, [r1, r3]
 800acac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	40023800 	.word	0x40023800
 800acb8:	0800c028 	.word	0x0800c028

0800acbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e03f      	b.n	800ad4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7fe fb38 	bl	8009358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2224      	movs	r2, #36	; 0x24
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68da      	ldr	r2, [r3, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f9cb 	bl	800b09c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	691a      	ldr	r2, [r3, #16]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	695a      	ldr	r2, [r3, #20]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68da      	ldr	r2, [r3, #12]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2220      	movs	r2, #32
 800ad48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b08a      	sub	sp, #40	; 0x28
 800ad5a:	af02      	add	r7, sp, #8
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	603b      	str	r3, [r7, #0]
 800ad62:	4613      	mov	r3, r2
 800ad64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	d17c      	bne.n	800ae70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <HAL_UART_Transmit+0x2c>
 800ad7c:	88fb      	ldrh	r3, [r7, #6]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e075      	b.n	800ae72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <HAL_UART_Transmit+0x3e>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e06e      	b.n	800ae72 <HAL_UART_Transmit+0x11c>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2221      	movs	r2, #33	; 0x21
 800ada6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adaa:	f7fe fc5b 	bl	8009664 <HAL_GetTick>
 800adae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	88fa      	ldrh	r2, [r7, #6]
 800adb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	88fa      	ldrh	r2, [r7, #6]
 800adba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adc4:	d108      	bne.n	800add8 <HAL_UART_Transmit+0x82>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d104      	bne.n	800add8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800adce:	2300      	movs	r3, #0
 800add0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	61bb      	str	r3, [r7, #24]
 800add6:	e003      	b.n	800ade0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800addc:	2300      	movs	r3, #0
 800adde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ade8:	e02a      	b.n	800ae40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2200      	movs	r2, #0
 800adf2:	2180      	movs	r1, #128	; 0x80
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f8e2 	bl	800afbe <UART_WaitOnFlagUntilTimeout>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e036      	b.n	800ae72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10b      	bne.n	800ae22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	3302      	adds	r3, #2
 800ae1e:	61bb      	str	r3, [r7, #24]
 800ae20:	e007      	b.n	800ae32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	781a      	ldrb	r2, [r3, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1cf      	bne.n	800adea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2200      	movs	r2, #0
 800ae52:	2140      	movs	r1, #64	; 0x40
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 f8b2 	bl	800afbe <UART_WaitOnFlagUntilTimeout>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ae60:	2303      	movs	r3, #3
 800ae62:	e006      	b.n	800ae72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	e000      	b.n	800ae72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ae70:	2302      	movs	r3, #2
  }
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b08a      	sub	sp, #40	; 0x28
 800ae7e:	af02      	add	r7, sp, #8
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	60b9      	str	r1, [r7, #8]
 800ae84:	603b      	str	r3, [r7, #0]
 800ae86:	4613      	mov	r3, r2
 800ae88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b20      	cmp	r3, #32
 800ae98:	f040 808c 	bne.w	800afb4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <HAL_UART_Receive+0x2e>
 800aea2:	88fb      	ldrh	r3, [r7, #6]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e084      	b.n	800afb6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <HAL_UART_Receive+0x40>
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e07d      	b.n	800afb6 <HAL_UART_Receive+0x13c>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2222      	movs	r2, #34	; 0x22
 800aecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aed6:	f7fe fbc5 	bl	8009664 <HAL_GetTick>
 800aeda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	88fa      	ldrh	r2, [r7, #6]
 800aee0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	88fa      	ldrh	r2, [r7, #6]
 800aee6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef0:	d108      	bne.n	800af04 <HAL_UART_Receive+0x8a>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d104      	bne.n	800af04 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	61bb      	str	r3, [r7, #24]
 800af02:	e003      	b.n	800af0c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800af14:	e043      	b.n	800af9e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2200      	movs	r2, #0
 800af1e:	2120      	movs	r1, #32
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 f84c 	bl	800afbe <UART_WaitOnFlagUntilTimeout>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e042      	b.n	800afb6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10c      	bne.n	800af50 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af42:	b29a      	uxth	r2, r3
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	3302      	adds	r3, #2
 800af4c:	61bb      	str	r3, [r7, #24]
 800af4e:	e01f      	b.n	800af90 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af58:	d007      	beq.n	800af6a <HAL_UART_Receive+0xf0>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <HAL_UART_Receive+0xfe>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	b2da      	uxtb	r2, r3
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	e008      	b.n	800af8a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af84:	b2da      	uxtb	r2, r3
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	3301      	adds	r3, #1
 800af8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af94:	b29b      	uxth	r3, r3
 800af96:	3b01      	subs	r3, #1
 800af98:	b29a      	uxth	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1b6      	bne.n	800af16 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2220      	movs	r2, #32
 800afac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e000      	b.n	800afb6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800afb4:	2302      	movs	r3, #2
  }
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3720      	adds	r7, #32
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b090      	sub	sp, #64	; 0x40
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	60f8      	str	r0, [r7, #12]
 800afc6:	60b9      	str	r1, [r7, #8]
 800afc8:	603b      	str	r3, [r7, #0]
 800afca:	4613      	mov	r3, r2
 800afcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afce:	e050      	b.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd6:	d04c      	beq.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800afd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d007      	beq.n	800afee <UART_WaitOnFlagUntilTimeout+0x30>
 800afde:	f7fe fb41 	bl	8009664 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afea:	429a      	cmp	r2, r3
 800afec:	d241      	bcs.n	800b072 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	330c      	adds	r3, #12
 800aff4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b004:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	330c      	adds	r3, #12
 800b00c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b00e:	637a      	str	r2, [r7, #52]	; 0x34
 800b010:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e5      	bne.n	800afee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3314      	adds	r3, #20
 800b028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	613b      	str	r3, [r7, #16]
   return(result);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f023 0301 	bic.w	r3, r3, #1
 800b038:	63bb      	str	r3, [r7, #56]	; 0x38
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3314      	adds	r3, #20
 800b040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b042:	623a      	str	r2, [r7, #32]
 800b044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b046:	69f9      	ldr	r1, [r7, #28]
 800b048:	6a3a      	ldr	r2, [r7, #32]
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e5      	bne.n	800b022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2220      	movs	r2, #32
 800b05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2220      	movs	r2, #32
 800b062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e00f      	b.n	800b092 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	4013      	ands	r3, r2
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	429a      	cmp	r2, r3
 800b080:	bf0c      	ite	eq
 800b082:	2301      	moveq	r3, #1
 800b084:	2300      	movne	r3, #0
 800b086:	b2db      	uxtb	r3, r3
 800b088:	461a      	mov	r2, r3
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d09f      	beq.n	800afd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3740      	adds	r7, #64	; 0x40
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a0:	b09f      	sub	sp, #124	; 0x7c
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b2:	68d9      	ldr	r1, [r3, #12]
 800b0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	ea40 0301 	orr.w	r3, r0, r1
 800b0bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b0be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c0:	689a      	ldr	r2, [r3, #8]
 800b0c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b0d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b0e0:	f021 010c 	bic.w	r1, r1, #12
 800b0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	6999      	ldr	r1, [r3, #24]
 800b0fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	ea40 0301 	orr.w	r3, r0, r1
 800b104:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	4bc5      	ldr	r3, [pc, #788]	; (800b420 <UART_SetConfig+0x384>)
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d004      	beq.n	800b11a <UART_SetConfig+0x7e>
 800b110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	4bc3      	ldr	r3, [pc, #780]	; (800b424 <UART_SetConfig+0x388>)
 800b116:	429a      	cmp	r2, r3
 800b118:	d103      	bne.n	800b122 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b11a:	f7ff fdbb 	bl	800ac94 <HAL_RCC_GetPCLK2Freq>
 800b11e:	6778      	str	r0, [r7, #116]	; 0x74
 800b120:	e002      	b.n	800b128 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b122:	f7ff fda3 	bl	800ac6c <HAL_RCC_GetPCLK1Freq>
 800b126:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b130:	f040 80b6 	bne.w	800b2a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b136:	461c      	mov	r4, r3
 800b138:	f04f 0500 	mov.w	r5, #0
 800b13c:	4622      	mov	r2, r4
 800b13e:	462b      	mov	r3, r5
 800b140:	1891      	adds	r1, r2, r2
 800b142:	6439      	str	r1, [r7, #64]	; 0x40
 800b144:	415b      	adcs	r3, r3
 800b146:	647b      	str	r3, [r7, #68]	; 0x44
 800b148:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b14c:	1912      	adds	r2, r2, r4
 800b14e:	eb45 0303 	adc.w	r3, r5, r3
 800b152:	f04f 0000 	mov.w	r0, #0
 800b156:	f04f 0100 	mov.w	r1, #0
 800b15a:	00d9      	lsls	r1, r3, #3
 800b15c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b160:	00d0      	lsls	r0, r2, #3
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	1911      	adds	r1, r2, r4
 800b168:	6639      	str	r1, [r7, #96]	; 0x60
 800b16a:	416b      	adcs	r3, r5
 800b16c:	667b      	str	r3, [r7, #100]	; 0x64
 800b16e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	461a      	mov	r2, r3
 800b174:	f04f 0300 	mov.w	r3, #0
 800b178:	1891      	adds	r1, r2, r2
 800b17a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b17c:	415b      	adcs	r3, r3
 800b17e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b184:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b188:	f7fd f87a 	bl	8008280 <__aeabi_uldivmod>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4ba5      	ldr	r3, [pc, #660]	; (800b428 <UART_SetConfig+0x38c>)
 800b192:	fba3 2302 	umull	r2, r3, r3, r2
 800b196:	095b      	lsrs	r3, r3, #5
 800b198:	011e      	lsls	r6, r3, #4
 800b19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b19c:	461c      	mov	r4, r3
 800b19e:	f04f 0500 	mov.w	r5, #0
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	462b      	mov	r3, r5
 800b1a6:	1891      	adds	r1, r2, r2
 800b1a8:	6339      	str	r1, [r7, #48]	; 0x30
 800b1aa:	415b      	adcs	r3, r3
 800b1ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b1b2:	1912      	adds	r2, r2, r4
 800b1b4:	eb45 0303 	adc.w	r3, r5, r3
 800b1b8:	f04f 0000 	mov.w	r0, #0
 800b1bc:	f04f 0100 	mov.w	r1, #0
 800b1c0:	00d9      	lsls	r1, r3, #3
 800b1c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b1c6:	00d0      	lsls	r0, r2, #3
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	1911      	adds	r1, r2, r4
 800b1ce:	65b9      	str	r1, [r7, #88]	; 0x58
 800b1d0:	416b      	adcs	r3, r5
 800b1d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	f04f 0300 	mov.w	r3, #0
 800b1de:	1891      	adds	r1, r2, r2
 800b1e0:	62b9      	str	r1, [r7, #40]	; 0x28
 800b1e2:	415b      	adcs	r3, r3
 800b1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b1ee:	f7fd f847 	bl	8008280 <__aeabi_uldivmod>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	4b8c      	ldr	r3, [pc, #560]	; (800b428 <UART_SetConfig+0x38c>)
 800b1f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b1fc:	095b      	lsrs	r3, r3, #5
 800b1fe:	2164      	movs	r1, #100	; 0x64
 800b200:	fb01 f303 	mul.w	r3, r1, r3
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	00db      	lsls	r3, r3, #3
 800b208:	3332      	adds	r3, #50	; 0x32
 800b20a:	4a87      	ldr	r2, [pc, #540]	; (800b428 <UART_SetConfig+0x38c>)
 800b20c:	fba2 2303 	umull	r2, r3, r2, r3
 800b210:	095b      	lsrs	r3, r3, #5
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b218:	441e      	add	r6, r3
 800b21a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b21c:	4618      	mov	r0, r3
 800b21e:	f04f 0100 	mov.w	r1, #0
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	1894      	adds	r4, r2, r2
 800b228:	623c      	str	r4, [r7, #32]
 800b22a:	415b      	adcs	r3, r3
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
 800b22e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b232:	1812      	adds	r2, r2, r0
 800b234:	eb41 0303 	adc.w	r3, r1, r3
 800b238:	f04f 0400 	mov.w	r4, #0
 800b23c:	f04f 0500 	mov.w	r5, #0
 800b240:	00dd      	lsls	r5, r3, #3
 800b242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b246:	00d4      	lsls	r4, r2, #3
 800b248:	4622      	mov	r2, r4
 800b24a:	462b      	mov	r3, r5
 800b24c:	1814      	adds	r4, r2, r0
 800b24e:	653c      	str	r4, [r7, #80]	; 0x50
 800b250:	414b      	adcs	r3, r1
 800b252:	657b      	str	r3, [r7, #84]	; 0x54
 800b254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	461a      	mov	r2, r3
 800b25a:	f04f 0300 	mov.w	r3, #0
 800b25e:	1891      	adds	r1, r2, r2
 800b260:	61b9      	str	r1, [r7, #24]
 800b262:	415b      	adcs	r3, r3
 800b264:	61fb      	str	r3, [r7, #28]
 800b266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b26a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b26e:	f7fd f807 	bl	8008280 <__aeabi_uldivmod>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4b6c      	ldr	r3, [pc, #432]	; (800b428 <UART_SetConfig+0x38c>)
 800b278:	fba3 1302 	umull	r1, r3, r3, r2
 800b27c:	095b      	lsrs	r3, r3, #5
 800b27e:	2164      	movs	r1, #100	; 0x64
 800b280:	fb01 f303 	mul.w	r3, r1, r3
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	3332      	adds	r3, #50	; 0x32
 800b28a:	4a67      	ldr	r2, [pc, #412]	; (800b428 <UART_SetConfig+0x38c>)
 800b28c:	fba2 2303 	umull	r2, r3, r2, r3
 800b290:	095b      	lsrs	r3, r3, #5
 800b292:	f003 0207 	and.w	r2, r3, #7
 800b296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4432      	add	r2, r6
 800b29c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b29e:	e0b9      	b.n	800b414 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b2a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2a2:	461c      	mov	r4, r3
 800b2a4:	f04f 0500 	mov.w	r5, #0
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	462b      	mov	r3, r5
 800b2ac:	1891      	adds	r1, r2, r2
 800b2ae:	6139      	str	r1, [r7, #16]
 800b2b0:	415b      	adcs	r3, r3
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b2b8:	1912      	adds	r2, r2, r4
 800b2ba:	eb45 0303 	adc.w	r3, r5, r3
 800b2be:	f04f 0000 	mov.w	r0, #0
 800b2c2:	f04f 0100 	mov.w	r1, #0
 800b2c6:	00d9      	lsls	r1, r3, #3
 800b2c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b2cc:	00d0      	lsls	r0, r2, #3
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	eb12 0804 	adds.w	r8, r2, r4
 800b2d6:	eb43 0905 	adc.w	r9, r3, r5
 800b2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f04f 0100 	mov.w	r1, #0
 800b2e4:	f04f 0200 	mov.w	r2, #0
 800b2e8:	f04f 0300 	mov.w	r3, #0
 800b2ec:	008b      	lsls	r3, r1, #2
 800b2ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b2f2:	0082      	lsls	r2, r0, #2
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	f7fc ffc2 	bl	8008280 <__aeabi_uldivmod>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4b49      	ldr	r3, [pc, #292]	; (800b428 <UART_SetConfig+0x38c>)
 800b302:	fba3 2302 	umull	r2, r3, r3, r2
 800b306:	095b      	lsrs	r3, r3, #5
 800b308:	011e      	lsls	r6, r3, #4
 800b30a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b30c:	4618      	mov	r0, r3
 800b30e:	f04f 0100 	mov.w	r1, #0
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	1894      	adds	r4, r2, r2
 800b318:	60bc      	str	r4, [r7, #8]
 800b31a:	415b      	adcs	r3, r3
 800b31c:	60fb      	str	r3, [r7, #12]
 800b31e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b322:	1812      	adds	r2, r2, r0
 800b324:	eb41 0303 	adc.w	r3, r1, r3
 800b328:	f04f 0400 	mov.w	r4, #0
 800b32c:	f04f 0500 	mov.w	r5, #0
 800b330:	00dd      	lsls	r5, r3, #3
 800b332:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b336:	00d4      	lsls	r4, r2, #3
 800b338:	4622      	mov	r2, r4
 800b33a:	462b      	mov	r3, r5
 800b33c:	1814      	adds	r4, r2, r0
 800b33e:	64bc      	str	r4, [r7, #72]	; 0x48
 800b340:	414b      	adcs	r3, r1
 800b342:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	4618      	mov	r0, r3
 800b34a:	f04f 0100 	mov.w	r1, #0
 800b34e:	f04f 0200 	mov.w	r2, #0
 800b352:	f04f 0300 	mov.w	r3, #0
 800b356:	008b      	lsls	r3, r1, #2
 800b358:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b35c:	0082      	lsls	r2, r0, #2
 800b35e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b362:	f7fc ff8d 	bl	8008280 <__aeabi_uldivmod>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4b2f      	ldr	r3, [pc, #188]	; (800b428 <UART_SetConfig+0x38c>)
 800b36c:	fba3 1302 	umull	r1, r3, r3, r2
 800b370:	095b      	lsrs	r3, r3, #5
 800b372:	2164      	movs	r1, #100	; 0x64
 800b374:	fb01 f303 	mul.w	r3, r1, r3
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	3332      	adds	r3, #50	; 0x32
 800b37e:	4a2a      	ldr	r2, [pc, #168]	; (800b428 <UART_SetConfig+0x38c>)
 800b380:	fba2 2303 	umull	r2, r3, r2, r3
 800b384:	095b      	lsrs	r3, r3, #5
 800b386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b38a:	441e      	add	r6, r3
 800b38c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b38e:	4618      	mov	r0, r3
 800b390:	f04f 0100 	mov.w	r1, #0
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	1894      	adds	r4, r2, r2
 800b39a:	603c      	str	r4, [r7, #0]
 800b39c:	415b      	adcs	r3, r3
 800b39e:	607b      	str	r3, [r7, #4]
 800b3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a4:	1812      	adds	r2, r2, r0
 800b3a6:	eb41 0303 	adc.w	r3, r1, r3
 800b3aa:	f04f 0400 	mov.w	r4, #0
 800b3ae:	f04f 0500 	mov.w	r5, #0
 800b3b2:	00dd      	lsls	r5, r3, #3
 800b3b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b3b8:	00d4      	lsls	r4, r2, #3
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	462b      	mov	r3, r5
 800b3be:	eb12 0a00 	adds.w	sl, r2, r0
 800b3c2:	eb43 0b01 	adc.w	fp, r3, r1
 800b3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f04f 0100 	mov.w	r1, #0
 800b3d0:	f04f 0200 	mov.w	r2, #0
 800b3d4:	f04f 0300 	mov.w	r3, #0
 800b3d8:	008b      	lsls	r3, r1, #2
 800b3da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b3de:	0082      	lsls	r2, r0, #2
 800b3e0:	4650      	mov	r0, sl
 800b3e2:	4659      	mov	r1, fp
 800b3e4:	f7fc ff4c 	bl	8008280 <__aeabi_uldivmod>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4b0e      	ldr	r3, [pc, #56]	; (800b428 <UART_SetConfig+0x38c>)
 800b3ee:	fba3 1302 	umull	r1, r3, r3, r2
 800b3f2:	095b      	lsrs	r3, r3, #5
 800b3f4:	2164      	movs	r1, #100	; 0x64
 800b3f6:	fb01 f303 	mul.w	r3, r1, r3
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	011b      	lsls	r3, r3, #4
 800b3fe:	3332      	adds	r3, #50	; 0x32
 800b400:	4a09      	ldr	r2, [pc, #36]	; (800b428 <UART_SetConfig+0x38c>)
 800b402:	fba2 2303 	umull	r2, r3, r2, r3
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	f003 020f 	and.w	r2, r3, #15
 800b40c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4432      	add	r2, r6
 800b412:	609a      	str	r2, [r3, #8]
}
 800b414:	bf00      	nop
 800b416:	377c      	adds	r7, #124	; 0x7c
 800b418:	46bd      	mov	sp, r7
 800b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41e:	bf00      	nop
 800b420:	40011000 	.word	0x40011000
 800b424:	40011400 	.word	0x40011400
 800b428:	51eb851f 	.word	0x51eb851f

0800b42c <__errno>:
 800b42c:	4b01      	ldr	r3, [pc, #4]	; (800b434 <__errno+0x8>)
 800b42e:	6818      	ldr	r0, [r3, #0]
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	20000018 	.word	0x20000018

0800b438 <__libc_init_array>:
 800b438:	b570      	push	{r4, r5, r6, lr}
 800b43a:	4d0d      	ldr	r5, [pc, #52]	; (800b470 <__libc_init_array+0x38>)
 800b43c:	4c0d      	ldr	r4, [pc, #52]	; (800b474 <__libc_init_array+0x3c>)
 800b43e:	1b64      	subs	r4, r4, r5
 800b440:	10a4      	asrs	r4, r4, #2
 800b442:	2600      	movs	r6, #0
 800b444:	42a6      	cmp	r6, r4
 800b446:	d109      	bne.n	800b45c <__libc_init_array+0x24>
 800b448:	4d0b      	ldr	r5, [pc, #44]	; (800b478 <__libc_init_array+0x40>)
 800b44a:	4c0c      	ldr	r4, [pc, #48]	; (800b47c <__libc_init_array+0x44>)
 800b44c:	f000 fc4e 	bl	800bcec <_init>
 800b450:	1b64      	subs	r4, r4, r5
 800b452:	10a4      	asrs	r4, r4, #2
 800b454:	2600      	movs	r6, #0
 800b456:	42a6      	cmp	r6, r4
 800b458:	d105      	bne.n	800b466 <__libc_init_array+0x2e>
 800b45a:	bd70      	pop	{r4, r5, r6, pc}
 800b45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b460:	4798      	blx	r3
 800b462:	3601      	adds	r6, #1
 800b464:	e7ee      	b.n	800b444 <__libc_init_array+0xc>
 800b466:	f855 3b04 	ldr.w	r3, [r5], #4
 800b46a:	4798      	blx	r3
 800b46c:	3601      	adds	r6, #1
 800b46e:	e7f2      	b.n	800b456 <__libc_init_array+0x1e>
 800b470:	0800c06c 	.word	0x0800c06c
 800b474:	0800c06c 	.word	0x0800c06c
 800b478:	0800c06c 	.word	0x0800c06c
 800b47c:	0800c070 	.word	0x0800c070

0800b480 <memset>:
 800b480:	4402      	add	r2, r0
 800b482:	4603      	mov	r3, r0
 800b484:	4293      	cmp	r3, r2
 800b486:	d100      	bne.n	800b48a <memset+0xa>
 800b488:	4770      	bx	lr
 800b48a:	f803 1b01 	strb.w	r1, [r3], #1
 800b48e:	e7f9      	b.n	800b484 <memset+0x4>

0800b490 <_vsiprintf_r>:
 800b490:	b500      	push	{lr}
 800b492:	b09b      	sub	sp, #108	; 0x6c
 800b494:	9100      	str	r1, [sp, #0]
 800b496:	9104      	str	r1, [sp, #16]
 800b498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b49c:	9105      	str	r1, [sp, #20]
 800b49e:	9102      	str	r1, [sp, #8]
 800b4a0:	4905      	ldr	r1, [pc, #20]	; (800b4b8 <_vsiprintf_r+0x28>)
 800b4a2:	9103      	str	r1, [sp, #12]
 800b4a4:	4669      	mov	r1, sp
 800b4a6:	f000 f86f 	bl	800b588 <_svfiprintf_r>
 800b4aa:	9b00      	ldr	r3, [sp, #0]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	b01b      	add	sp, #108	; 0x6c
 800b4b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4b6:	bf00      	nop
 800b4b8:	ffff0208 	.word	0xffff0208

0800b4bc <vsiprintf>:
 800b4bc:	4613      	mov	r3, r2
 800b4be:	460a      	mov	r2, r1
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	4802      	ldr	r0, [pc, #8]	; (800b4cc <vsiprintf+0x10>)
 800b4c4:	6800      	ldr	r0, [r0, #0]
 800b4c6:	f7ff bfe3 	b.w	800b490 <_vsiprintf_r>
 800b4ca:	bf00      	nop
 800b4cc:	20000018 	.word	0x20000018

0800b4d0 <__ssputs_r>:
 800b4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	688e      	ldr	r6, [r1, #8]
 800b4d6:	429e      	cmp	r6, r3
 800b4d8:	4682      	mov	sl, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	4690      	mov	r8, r2
 800b4de:	461f      	mov	r7, r3
 800b4e0:	d838      	bhi.n	800b554 <__ssputs_r+0x84>
 800b4e2:	898a      	ldrh	r2, [r1, #12]
 800b4e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4e8:	d032      	beq.n	800b550 <__ssputs_r+0x80>
 800b4ea:	6825      	ldr	r5, [r4, #0]
 800b4ec:	6909      	ldr	r1, [r1, #16]
 800b4ee:	eba5 0901 	sub.w	r9, r5, r1
 800b4f2:	6965      	ldr	r5, [r4, #20]
 800b4f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	444b      	add	r3, r9
 800b500:	106d      	asrs	r5, r5, #1
 800b502:	429d      	cmp	r5, r3
 800b504:	bf38      	it	cc
 800b506:	461d      	movcc	r5, r3
 800b508:	0553      	lsls	r3, r2, #21
 800b50a:	d531      	bpl.n	800b570 <__ssputs_r+0xa0>
 800b50c:	4629      	mov	r1, r5
 800b50e:	f000 fb47 	bl	800bba0 <_malloc_r>
 800b512:	4606      	mov	r6, r0
 800b514:	b950      	cbnz	r0, 800b52c <__ssputs_r+0x5c>
 800b516:	230c      	movs	r3, #12
 800b518:	f8ca 3000 	str.w	r3, [sl]
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52c:	6921      	ldr	r1, [r4, #16]
 800b52e:	464a      	mov	r2, r9
 800b530:	f000 fabe 	bl	800bab0 <memcpy>
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b53e:	81a3      	strh	r3, [r4, #12]
 800b540:	6126      	str	r6, [r4, #16]
 800b542:	6165      	str	r5, [r4, #20]
 800b544:	444e      	add	r6, r9
 800b546:	eba5 0509 	sub.w	r5, r5, r9
 800b54a:	6026      	str	r6, [r4, #0]
 800b54c:	60a5      	str	r5, [r4, #8]
 800b54e:	463e      	mov	r6, r7
 800b550:	42be      	cmp	r6, r7
 800b552:	d900      	bls.n	800b556 <__ssputs_r+0x86>
 800b554:	463e      	mov	r6, r7
 800b556:	4632      	mov	r2, r6
 800b558:	6820      	ldr	r0, [r4, #0]
 800b55a:	4641      	mov	r1, r8
 800b55c:	f000 fab6 	bl	800bacc <memmove>
 800b560:	68a3      	ldr	r3, [r4, #8]
 800b562:	6822      	ldr	r2, [r4, #0]
 800b564:	1b9b      	subs	r3, r3, r6
 800b566:	4432      	add	r2, r6
 800b568:	60a3      	str	r3, [r4, #8]
 800b56a:	6022      	str	r2, [r4, #0]
 800b56c:	2000      	movs	r0, #0
 800b56e:	e7db      	b.n	800b528 <__ssputs_r+0x58>
 800b570:	462a      	mov	r2, r5
 800b572:	f000 fb6f 	bl	800bc54 <_realloc_r>
 800b576:	4606      	mov	r6, r0
 800b578:	2800      	cmp	r0, #0
 800b57a:	d1e1      	bne.n	800b540 <__ssputs_r+0x70>
 800b57c:	6921      	ldr	r1, [r4, #16]
 800b57e:	4650      	mov	r0, sl
 800b580:	f000 fabe 	bl	800bb00 <_free_r>
 800b584:	e7c7      	b.n	800b516 <__ssputs_r+0x46>
	...

0800b588 <_svfiprintf_r>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	4698      	mov	r8, r3
 800b58e:	898b      	ldrh	r3, [r1, #12]
 800b590:	061b      	lsls	r3, r3, #24
 800b592:	b09d      	sub	sp, #116	; 0x74
 800b594:	4607      	mov	r7, r0
 800b596:	460d      	mov	r5, r1
 800b598:	4614      	mov	r4, r2
 800b59a:	d50e      	bpl.n	800b5ba <_svfiprintf_r+0x32>
 800b59c:	690b      	ldr	r3, [r1, #16]
 800b59e:	b963      	cbnz	r3, 800b5ba <_svfiprintf_r+0x32>
 800b5a0:	2140      	movs	r1, #64	; 0x40
 800b5a2:	f000 fafd 	bl	800bba0 <_malloc_r>
 800b5a6:	6028      	str	r0, [r5, #0]
 800b5a8:	6128      	str	r0, [r5, #16]
 800b5aa:	b920      	cbnz	r0, 800b5b6 <_svfiprintf_r+0x2e>
 800b5ac:	230c      	movs	r3, #12
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	e0d1      	b.n	800b75a <_svfiprintf_r+0x1d2>
 800b5b6:	2340      	movs	r3, #64	; 0x40
 800b5b8:	616b      	str	r3, [r5, #20]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5be:	2320      	movs	r3, #32
 800b5c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5c8:	2330      	movs	r3, #48	; 0x30
 800b5ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b774 <_svfiprintf_r+0x1ec>
 800b5ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5d2:	f04f 0901 	mov.w	r9, #1
 800b5d6:	4623      	mov	r3, r4
 800b5d8:	469a      	mov	sl, r3
 800b5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5de:	b10a      	cbz	r2, 800b5e4 <_svfiprintf_r+0x5c>
 800b5e0:	2a25      	cmp	r2, #37	; 0x25
 800b5e2:	d1f9      	bne.n	800b5d8 <_svfiprintf_r+0x50>
 800b5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5e8:	d00b      	beq.n	800b602 <_svfiprintf_r+0x7a>
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f7ff ff6d 	bl	800b4d0 <__ssputs_r>
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f000 80aa 	beq.w	800b750 <_svfiprintf_r+0x1c8>
 800b5fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5fe:	445a      	add	r2, fp
 800b600:	9209      	str	r2, [sp, #36]	; 0x24
 800b602:	f89a 3000 	ldrb.w	r3, [sl]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 80a2 	beq.w	800b750 <_svfiprintf_r+0x1c8>
 800b60c:	2300      	movs	r3, #0
 800b60e:	f04f 32ff 	mov.w	r2, #4294967295
 800b612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b616:	f10a 0a01 	add.w	sl, sl, #1
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	9307      	str	r3, [sp, #28]
 800b61e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b622:	931a      	str	r3, [sp, #104]	; 0x68
 800b624:	4654      	mov	r4, sl
 800b626:	2205      	movs	r2, #5
 800b628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b62c:	4851      	ldr	r0, [pc, #324]	; (800b774 <_svfiprintf_r+0x1ec>)
 800b62e:	f7fc fdd7 	bl	80081e0 <memchr>
 800b632:	9a04      	ldr	r2, [sp, #16]
 800b634:	b9d8      	cbnz	r0, 800b66e <_svfiprintf_r+0xe6>
 800b636:	06d0      	lsls	r0, r2, #27
 800b638:	bf44      	itt	mi
 800b63a:	2320      	movmi	r3, #32
 800b63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b640:	0711      	lsls	r1, r2, #28
 800b642:	bf44      	itt	mi
 800b644:	232b      	movmi	r3, #43	; 0x2b
 800b646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b64a:	f89a 3000 	ldrb.w	r3, [sl]
 800b64e:	2b2a      	cmp	r3, #42	; 0x2a
 800b650:	d015      	beq.n	800b67e <_svfiprintf_r+0xf6>
 800b652:	9a07      	ldr	r2, [sp, #28]
 800b654:	4654      	mov	r4, sl
 800b656:	2000      	movs	r0, #0
 800b658:	f04f 0c0a 	mov.w	ip, #10
 800b65c:	4621      	mov	r1, r4
 800b65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b662:	3b30      	subs	r3, #48	; 0x30
 800b664:	2b09      	cmp	r3, #9
 800b666:	d94e      	bls.n	800b706 <_svfiprintf_r+0x17e>
 800b668:	b1b0      	cbz	r0, 800b698 <_svfiprintf_r+0x110>
 800b66a:	9207      	str	r2, [sp, #28]
 800b66c:	e014      	b.n	800b698 <_svfiprintf_r+0x110>
 800b66e:	eba0 0308 	sub.w	r3, r0, r8
 800b672:	fa09 f303 	lsl.w	r3, r9, r3
 800b676:	4313      	orrs	r3, r2
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	46a2      	mov	sl, r4
 800b67c:	e7d2      	b.n	800b624 <_svfiprintf_r+0x9c>
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	1d19      	adds	r1, r3, #4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	9103      	str	r1, [sp, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	bfbb      	ittet	lt
 800b68a:	425b      	neglt	r3, r3
 800b68c:	f042 0202 	orrlt.w	r2, r2, #2
 800b690:	9307      	strge	r3, [sp, #28]
 800b692:	9307      	strlt	r3, [sp, #28]
 800b694:	bfb8      	it	lt
 800b696:	9204      	strlt	r2, [sp, #16]
 800b698:	7823      	ldrb	r3, [r4, #0]
 800b69a:	2b2e      	cmp	r3, #46	; 0x2e
 800b69c:	d10c      	bne.n	800b6b8 <_svfiprintf_r+0x130>
 800b69e:	7863      	ldrb	r3, [r4, #1]
 800b6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a2:	d135      	bne.n	800b710 <_svfiprintf_r+0x188>
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	1d1a      	adds	r2, r3, #4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	9203      	str	r2, [sp, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	bfb8      	it	lt
 800b6b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6b4:	3402      	adds	r4, #2
 800b6b6:	9305      	str	r3, [sp, #20]
 800b6b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b784 <_svfiprintf_r+0x1fc>
 800b6bc:	7821      	ldrb	r1, [r4, #0]
 800b6be:	2203      	movs	r2, #3
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	f7fc fd8d 	bl	80081e0 <memchr>
 800b6c6:	b140      	cbz	r0, 800b6da <_svfiprintf_r+0x152>
 800b6c8:	2340      	movs	r3, #64	; 0x40
 800b6ca:	eba0 000a 	sub.w	r0, r0, sl
 800b6ce:	fa03 f000 	lsl.w	r0, r3, r0
 800b6d2:	9b04      	ldr	r3, [sp, #16]
 800b6d4:	4303      	orrs	r3, r0
 800b6d6:	3401      	adds	r4, #1
 800b6d8:	9304      	str	r3, [sp, #16]
 800b6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6de:	4826      	ldr	r0, [pc, #152]	; (800b778 <_svfiprintf_r+0x1f0>)
 800b6e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6e4:	2206      	movs	r2, #6
 800b6e6:	f7fc fd7b 	bl	80081e0 <memchr>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d038      	beq.n	800b760 <_svfiprintf_r+0x1d8>
 800b6ee:	4b23      	ldr	r3, [pc, #140]	; (800b77c <_svfiprintf_r+0x1f4>)
 800b6f0:	bb1b      	cbnz	r3, 800b73a <_svfiprintf_r+0x1b2>
 800b6f2:	9b03      	ldr	r3, [sp, #12]
 800b6f4:	3307      	adds	r3, #7
 800b6f6:	f023 0307 	bic.w	r3, r3, #7
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	9303      	str	r3, [sp, #12]
 800b6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b700:	4433      	add	r3, r6
 800b702:	9309      	str	r3, [sp, #36]	; 0x24
 800b704:	e767      	b.n	800b5d6 <_svfiprintf_r+0x4e>
 800b706:	fb0c 3202 	mla	r2, ip, r2, r3
 800b70a:	460c      	mov	r4, r1
 800b70c:	2001      	movs	r0, #1
 800b70e:	e7a5      	b.n	800b65c <_svfiprintf_r+0xd4>
 800b710:	2300      	movs	r3, #0
 800b712:	3401      	adds	r4, #1
 800b714:	9305      	str	r3, [sp, #20]
 800b716:	4619      	mov	r1, r3
 800b718:	f04f 0c0a 	mov.w	ip, #10
 800b71c:	4620      	mov	r0, r4
 800b71e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b722:	3a30      	subs	r2, #48	; 0x30
 800b724:	2a09      	cmp	r2, #9
 800b726:	d903      	bls.n	800b730 <_svfiprintf_r+0x1a8>
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0c5      	beq.n	800b6b8 <_svfiprintf_r+0x130>
 800b72c:	9105      	str	r1, [sp, #20]
 800b72e:	e7c3      	b.n	800b6b8 <_svfiprintf_r+0x130>
 800b730:	fb0c 2101 	mla	r1, ip, r1, r2
 800b734:	4604      	mov	r4, r0
 800b736:	2301      	movs	r3, #1
 800b738:	e7f0      	b.n	800b71c <_svfiprintf_r+0x194>
 800b73a:	ab03      	add	r3, sp, #12
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	462a      	mov	r2, r5
 800b740:	4b0f      	ldr	r3, [pc, #60]	; (800b780 <_svfiprintf_r+0x1f8>)
 800b742:	a904      	add	r1, sp, #16
 800b744:	4638      	mov	r0, r7
 800b746:	f3af 8000 	nop.w
 800b74a:	1c42      	adds	r2, r0, #1
 800b74c:	4606      	mov	r6, r0
 800b74e:	d1d6      	bne.n	800b6fe <_svfiprintf_r+0x176>
 800b750:	89ab      	ldrh	r3, [r5, #12]
 800b752:	065b      	lsls	r3, r3, #25
 800b754:	f53f af2c 	bmi.w	800b5b0 <_svfiprintf_r+0x28>
 800b758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b75a:	b01d      	add	sp, #116	; 0x74
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	ab03      	add	r3, sp, #12
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	462a      	mov	r2, r5
 800b766:	4b06      	ldr	r3, [pc, #24]	; (800b780 <_svfiprintf_r+0x1f8>)
 800b768:	a904      	add	r1, sp, #16
 800b76a:	4638      	mov	r0, r7
 800b76c:	f000 f87a 	bl	800b864 <_printf_i>
 800b770:	e7eb      	b.n	800b74a <_svfiprintf_r+0x1c2>
 800b772:	bf00      	nop
 800b774:	0800c030 	.word	0x0800c030
 800b778:	0800c03a 	.word	0x0800c03a
 800b77c:	00000000 	.word	0x00000000
 800b780:	0800b4d1 	.word	0x0800b4d1
 800b784:	0800c036 	.word	0x0800c036

0800b788 <_printf_common>:
 800b788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	4616      	mov	r6, r2
 800b78e:	4699      	mov	r9, r3
 800b790:	688a      	ldr	r2, [r1, #8]
 800b792:	690b      	ldr	r3, [r1, #16]
 800b794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b798:	4293      	cmp	r3, r2
 800b79a:	bfb8      	it	lt
 800b79c:	4613      	movlt	r3, r2
 800b79e:	6033      	str	r3, [r6, #0]
 800b7a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	b10a      	cbz	r2, 800b7ae <_printf_common+0x26>
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	6033      	str	r3, [r6, #0]
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	0699      	lsls	r1, r3, #26
 800b7b2:	bf42      	ittt	mi
 800b7b4:	6833      	ldrmi	r3, [r6, #0]
 800b7b6:	3302      	addmi	r3, #2
 800b7b8:	6033      	strmi	r3, [r6, #0]
 800b7ba:	6825      	ldr	r5, [r4, #0]
 800b7bc:	f015 0506 	ands.w	r5, r5, #6
 800b7c0:	d106      	bne.n	800b7d0 <_printf_common+0x48>
 800b7c2:	f104 0a19 	add.w	sl, r4, #25
 800b7c6:	68e3      	ldr	r3, [r4, #12]
 800b7c8:	6832      	ldr	r2, [r6, #0]
 800b7ca:	1a9b      	subs	r3, r3, r2
 800b7cc:	42ab      	cmp	r3, r5
 800b7ce:	dc26      	bgt.n	800b81e <_printf_common+0x96>
 800b7d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7d4:	1e13      	subs	r3, r2, #0
 800b7d6:	6822      	ldr	r2, [r4, #0]
 800b7d8:	bf18      	it	ne
 800b7da:	2301      	movne	r3, #1
 800b7dc:	0692      	lsls	r2, r2, #26
 800b7de:	d42b      	bmi.n	800b838 <_printf_common+0xb0>
 800b7e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	47c0      	blx	r8
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d01e      	beq.n	800b82c <_printf_common+0xa4>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	68e5      	ldr	r5, [r4, #12]
 800b7f2:	6832      	ldr	r2, [r6, #0]
 800b7f4:	f003 0306 	and.w	r3, r3, #6
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	bf08      	it	eq
 800b7fc:	1aad      	subeq	r5, r5, r2
 800b7fe:	68a3      	ldr	r3, [r4, #8]
 800b800:	6922      	ldr	r2, [r4, #16]
 800b802:	bf0c      	ite	eq
 800b804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b808:	2500      	movne	r5, #0
 800b80a:	4293      	cmp	r3, r2
 800b80c:	bfc4      	itt	gt
 800b80e:	1a9b      	subgt	r3, r3, r2
 800b810:	18ed      	addgt	r5, r5, r3
 800b812:	2600      	movs	r6, #0
 800b814:	341a      	adds	r4, #26
 800b816:	42b5      	cmp	r5, r6
 800b818:	d11a      	bne.n	800b850 <_printf_common+0xc8>
 800b81a:	2000      	movs	r0, #0
 800b81c:	e008      	b.n	800b830 <_printf_common+0xa8>
 800b81e:	2301      	movs	r3, #1
 800b820:	4652      	mov	r2, sl
 800b822:	4649      	mov	r1, r9
 800b824:	4638      	mov	r0, r7
 800b826:	47c0      	blx	r8
 800b828:	3001      	adds	r0, #1
 800b82a:	d103      	bne.n	800b834 <_printf_common+0xac>
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295
 800b830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b834:	3501      	adds	r5, #1
 800b836:	e7c6      	b.n	800b7c6 <_printf_common+0x3e>
 800b838:	18e1      	adds	r1, r4, r3
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	2030      	movs	r0, #48	; 0x30
 800b83e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b842:	4422      	add	r2, r4
 800b844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b84c:	3302      	adds	r3, #2
 800b84e:	e7c7      	b.n	800b7e0 <_printf_common+0x58>
 800b850:	2301      	movs	r3, #1
 800b852:	4622      	mov	r2, r4
 800b854:	4649      	mov	r1, r9
 800b856:	4638      	mov	r0, r7
 800b858:	47c0      	blx	r8
 800b85a:	3001      	adds	r0, #1
 800b85c:	d0e6      	beq.n	800b82c <_printf_common+0xa4>
 800b85e:	3601      	adds	r6, #1
 800b860:	e7d9      	b.n	800b816 <_printf_common+0x8e>
	...

0800b864 <_printf_i>:
 800b864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b868:	460c      	mov	r4, r1
 800b86a:	4691      	mov	r9, r2
 800b86c:	7e27      	ldrb	r7, [r4, #24]
 800b86e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b870:	2f78      	cmp	r7, #120	; 0x78
 800b872:	4680      	mov	r8, r0
 800b874:	469a      	mov	sl, r3
 800b876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b87a:	d807      	bhi.n	800b88c <_printf_i+0x28>
 800b87c:	2f62      	cmp	r7, #98	; 0x62
 800b87e:	d80a      	bhi.n	800b896 <_printf_i+0x32>
 800b880:	2f00      	cmp	r7, #0
 800b882:	f000 80d8 	beq.w	800ba36 <_printf_i+0x1d2>
 800b886:	2f58      	cmp	r7, #88	; 0x58
 800b888:	f000 80a3 	beq.w	800b9d2 <_printf_i+0x16e>
 800b88c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b894:	e03a      	b.n	800b90c <_printf_i+0xa8>
 800b896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b89a:	2b15      	cmp	r3, #21
 800b89c:	d8f6      	bhi.n	800b88c <_printf_i+0x28>
 800b89e:	a001      	add	r0, pc, #4	; (adr r0, 800b8a4 <_printf_i+0x40>)
 800b8a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b8a4:	0800b8fd 	.word	0x0800b8fd
 800b8a8:	0800b911 	.word	0x0800b911
 800b8ac:	0800b88d 	.word	0x0800b88d
 800b8b0:	0800b88d 	.word	0x0800b88d
 800b8b4:	0800b88d 	.word	0x0800b88d
 800b8b8:	0800b88d 	.word	0x0800b88d
 800b8bc:	0800b911 	.word	0x0800b911
 800b8c0:	0800b88d 	.word	0x0800b88d
 800b8c4:	0800b88d 	.word	0x0800b88d
 800b8c8:	0800b88d 	.word	0x0800b88d
 800b8cc:	0800b88d 	.word	0x0800b88d
 800b8d0:	0800ba1d 	.word	0x0800ba1d
 800b8d4:	0800b941 	.word	0x0800b941
 800b8d8:	0800b9ff 	.word	0x0800b9ff
 800b8dc:	0800b88d 	.word	0x0800b88d
 800b8e0:	0800b88d 	.word	0x0800b88d
 800b8e4:	0800ba3f 	.word	0x0800ba3f
 800b8e8:	0800b88d 	.word	0x0800b88d
 800b8ec:	0800b941 	.word	0x0800b941
 800b8f0:	0800b88d 	.word	0x0800b88d
 800b8f4:	0800b88d 	.word	0x0800b88d
 800b8f8:	0800ba07 	.word	0x0800ba07
 800b8fc:	680b      	ldr	r3, [r1, #0]
 800b8fe:	1d1a      	adds	r2, r3, #4
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	600a      	str	r2, [r1, #0]
 800b904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b90c:	2301      	movs	r3, #1
 800b90e:	e0a3      	b.n	800ba58 <_printf_i+0x1f4>
 800b910:	6825      	ldr	r5, [r4, #0]
 800b912:	6808      	ldr	r0, [r1, #0]
 800b914:	062e      	lsls	r6, r5, #24
 800b916:	f100 0304 	add.w	r3, r0, #4
 800b91a:	d50a      	bpl.n	800b932 <_printf_i+0xce>
 800b91c:	6805      	ldr	r5, [r0, #0]
 800b91e:	600b      	str	r3, [r1, #0]
 800b920:	2d00      	cmp	r5, #0
 800b922:	da03      	bge.n	800b92c <_printf_i+0xc8>
 800b924:	232d      	movs	r3, #45	; 0x2d
 800b926:	426d      	negs	r5, r5
 800b928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b92c:	485e      	ldr	r0, [pc, #376]	; (800baa8 <_printf_i+0x244>)
 800b92e:	230a      	movs	r3, #10
 800b930:	e019      	b.n	800b966 <_printf_i+0x102>
 800b932:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b936:	6805      	ldr	r5, [r0, #0]
 800b938:	600b      	str	r3, [r1, #0]
 800b93a:	bf18      	it	ne
 800b93c:	b22d      	sxthne	r5, r5
 800b93e:	e7ef      	b.n	800b920 <_printf_i+0xbc>
 800b940:	680b      	ldr	r3, [r1, #0]
 800b942:	6825      	ldr	r5, [r4, #0]
 800b944:	1d18      	adds	r0, r3, #4
 800b946:	6008      	str	r0, [r1, #0]
 800b948:	0628      	lsls	r0, r5, #24
 800b94a:	d501      	bpl.n	800b950 <_printf_i+0xec>
 800b94c:	681d      	ldr	r5, [r3, #0]
 800b94e:	e002      	b.n	800b956 <_printf_i+0xf2>
 800b950:	0669      	lsls	r1, r5, #25
 800b952:	d5fb      	bpl.n	800b94c <_printf_i+0xe8>
 800b954:	881d      	ldrh	r5, [r3, #0]
 800b956:	4854      	ldr	r0, [pc, #336]	; (800baa8 <_printf_i+0x244>)
 800b958:	2f6f      	cmp	r7, #111	; 0x6f
 800b95a:	bf0c      	ite	eq
 800b95c:	2308      	moveq	r3, #8
 800b95e:	230a      	movne	r3, #10
 800b960:	2100      	movs	r1, #0
 800b962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b966:	6866      	ldr	r6, [r4, #4]
 800b968:	60a6      	str	r6, [r4, #8]
 800b96a:	2e00      	cmp	r6, #0
 800b96c:	bfa2      	ittt	ge
 800b96e:	6821      	ldrge	r1, [r4, #0]
 800b970:	f021 0104 	bicge.w	r1, r1, #4
 800b974:	6021      	strge	r1, [r4, #0]
 800b976:	b90d      	cbnz	r5, 800b97c <_printf_i+0x118>
 800b978:	2e00      	cmp	r6, #0
 800b97a:	d04d      	beq.n	800ba18 <_printf_i+0x1b4>
 800b97c:	4616      	mov	r6, r2
 800b97e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b982:	fb03 5711 	mls	r7, r3, r1, r5
 800b986:	5dc7      	ldrb	r7, [r0, r7]
 800b988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b98c:	462f      	mov	r7, r5
 800b98e:	42bb      	cmp	r3, r7
 800b990:	460d      	mov	r5, r1
 800b992:	d9f4      	bls.n	800b97e <_printf_i+0x11a>
 800b994:	2b08      	cmp	r3, #8
 800b996:	d10b      	bne.n	800b9b0 <_printf_i+0x14c>
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	07df      	lsls	r7, r3, #31
 800b99c:	d508      	bpl.n	800b9b0 <_printf_i+0x14c>
 800b99e:	6923      	ldr	r3, [r4, #16]
 800b9a0:	6861      	ldr	r1, [r4, #4]
 800b9a2:	4299      	cmp	r1, r3
 800b9a4:	bfde      	ittt	le
 800b9a6:	2330      	movle	r3, #48	; 0x30
 800b9a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9b0:	1b92      	subs	r2, r2, r6
 800b9b2:	6122      	str	r2, [r4, #16]
 800b9b4:	f8cd a000 	str.w	sl, [sp]
 800b9b8:	464b      	mov	r3, r9
 800b9ba:	aa03      	add	r2, sp, #12
 800b9bc:	4621      	mov	r1, r4
 800b9be:	4640      	mov	r0, r8
 800b9c0:	f7ff fee2 	bl	800b788 <_printf_common>
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d14c      	bne.n	800ba62 <_printf_i+0x1fe>
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9cc:	b004      	add	sp, #16
 800b9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d2:	4835      	ldr	r0, [pc, #212]	; (800baa8 <_printf_i+0x244>)
 800b9d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b9d8:	6823      	ldr	r3, [r4, #0]
 800b9da:	680e      	ldr	r6, [r1, #0]
 800b9dc:	061f      	lsls	r7, r3, #24
 800b9de:	f856 5b04 	ldr.w	r5, [r6], #4
 800b9e2:	600e      	str	r6, [r1, #0]
 800b9e4:	d514      	bpl.n	800ba10 <_printf_i+0x1ac>
 800b9e6:	07d9      	lsls	r1, r3, #31
 800b9e8:	bf44      	itt	mi
 800b9ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b9ee:	6023      	strmi	r3, [r4, #0]
 800b9f0:	b91d      	cbnz	r5, 800b9fa <_printf_i+0x196>
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	f023 0320 	bic.w	r3, r3, #32
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	2310      	movs	r3, #16
 800b9fc:	e7b0      	b.n	800b960 <_printf_i+0xfc>
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	f043 0320 	orr.w	r3, r3, #32
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	2378      	movs	r3, #120	; 0x78
 800ba08:	4828      	ldr	r0, [pc, #160]	; (800baac <_printf_i+0x248>)
 800ba0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba0e:	e7e3      	b.n	800b9d8 <_printf_i+0x174>
 800ba10:	065e      	lsls	r6, r3, #25
 800ba12:	bf48      	it	mi
 800ba14:	b2ad      	uxthmi	r5, r5
 800ba16:	e7e6      	b.n	800b9e6 <_printf_i+0x182>
 800ba18:	4616      	mov	r6, r2
 800ba1a:	e7bb      	b.n	800b994 <_printf_i+0x130>
 800ba1c:	680b      	ldr	r3, [r1, #0]
 800ba1e:	6826      	ldr	r6, [r4, #0]
 800ba20:	6960      	ldr	r0, [r4, #20]
 800ba22:	1d1d      	adds	r5, r3, #4
 800ba24:	600d      	str	r5, [r1, #0]
 800ba26:	0635      	lsls	r5, r6, #24
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	d501      	bpl.n	800ba30 <_printf_i+0x1cc>
 800ba2c:	6018      	str	r0, [r3, #0]
 800ba2e:	e002      	b.n	800ba36 <_printf_i+0x1d2>
 800ba30:	0671      	lsls	r1, r6, #25
 800ba32:	d5fb      	bpl.n	800ba2c <_printf_i+0x1c8>
 800ba34:	8018      	strh	r0, [r3, #0]
 800ba36:	2300      	movs	r3, #0
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	4616      	mov	r6, r2
 800ba3c:	e7ba      	b.n	800b9b4 <_printf_i+0x150>
 800ba3e:	680b      	ldr	r3, [r1, #0]
 800ba40:	1d1a      	adds	r2, r3, #4
 800ba42:	600a      	str	r2, [r1, #0]
 800ba44:	681e      	ldr	r6, [r3, #0]
 800ba46:	6862      	ldr	r2, [r4, #4]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7fc fbc8 	bl	80081e0 <memchr>
 800ba50:	b108      	cbz	r0, 800ba56 <_printf_i+0x1f2>
 800ba52:	1b80      	subs	r0, r0, r6
 800ba54:	6060      	str	r0, [r4, #4]
 800ba56:	6863      	ldr	r3, [r4, #4]
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba60:	e7a8      	b.n	800b9b4 <_printf_i+0x150>
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	4632      	mov	r2, r6
 800ba66:	4649      	mov	r1, r9
 800ba68:	4640      	mov	r0, r8
 800ba6a:	47d0      	blx	sl
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d0ab      	beq.n	800b9c8 <_printf_i+0x164>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	079b      	lsls	r3, r3, #30
 800ba74:	d413      	bmi.n	800ba9e <_printf_i+0x23a>
 800ba76:	68e0      	ldr	r0, [r4, #12]
 800ba78:	9b03      	ldr	r3, [sp, #12]
 800ba7a:	4298      	cmp	r0, r3
 800ba7c:	bfb8      	it	lt
 800ba7e:	4618      	movlt	r0, r3
 800ba80:	e7a4      	b.n	800b9cc <_printf_i+0x168>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4632      	mov	r2, r6
 800ba86:	4649      	mov	r1, r9
 800ba88:	4640      	mov	r0, r8
 800ba8a:	47d0      	blx	sl
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d09b      	beq.n	800b9c8 <_printf_i+0x164>
 800ba90:	3501      	adds	r5, #1
 800ba92:	68e3      	ldr	r3, [r4, #12]
 800ba94:	9903      	ldr	r1, [sp, #12]
 800ba96:	1a5b      	subs	r3, r3, r1
 800ba98:	42ab      	cmp	r3, r5
 800ba9a:	dcf2      	bgt.n	800ba82 <_printf_i+0x21e>
 800ba9c:	e7eb      	b.n	800ba76 <_printf_i+0x212>
 800ba9e:	2500      	movs	r5, #0
 800baa0:	f104 0619 	add.w	r6, r4, #25
 800baa4:	e7f5      	b.n	800ba92 <_printf_i+0x22e>
 800baa6:	bf00      	nop
 800baa8:	0800c041 	.word	0x0800c041
 800baac:	0800c052 	.word	0x0800c052

0800bab0 <memcpy>:
 800bab0:	440a      	add	r2, r1
 800bab2:	4291      	cmp	r1, r2
 800bab4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bab8:	d100      	bne.n	800babc <memcpy+0xc>
 800baba:	4770      	bx	lr
 800babc:	b510      	push	{r4, lr}
 800babe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bac6:	4291      	cmp	r1, r2
 800bac8:	d1f9      	bne.n	800babe <memcpy+0xe>
 800baca:	bd10      	pop	{r4, pc}

0800bacc <memmove>:
 800bacc:	4288      	cmp	r0, r1
 800bace:	b510      	push	{r4, lr}
 800bad0:	eb01 0402 	add.w	r4, r1, r2
 800bad4:	d902      	bls.n	800badc <memmove+0x10>
 800bad6:	4284      	cmp	r4, r0
 800bad8:	4623      	mov	r3, r4
 800bada:	d807      	bhi.n	800baec <memmove+0x20>
 800badc:	1e43      	subs	r3, r0, #1
 800bade:	42a1      	cmp	r1, r4
 800bae0:	d008      	beq.n	800baf4 <memmove+0x28>
 800bae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baea:	e7f8      	b.n	800bade <memmove+0x12>
 800baec:	4402      	add	r2, r0
 800baee:	4601      	mov	r1, r0
 800baf0:	428a      	cmp	r2, r1
 800baf2:	d100      	bne.n	800baf6 <memmove+0x2a>
 800baf4:	bd10      	pop	{r4, pc}
 800baf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bafe:	e7f7      	b.n	800baf0 <memmove+0x24>

0800bb00 <_free_r>:
 800bb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb02:	2900      	cmp	r1, #0
 800bb04:	d048      	beq.n	800bb98 <_free_r+0x98>
 800bb06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb0a:	9001      	str	r0, [sp, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f1a1 0404 	sub.w	r4, r1, #4
 800bb12:	bfb8      	it	lt
 800bb14:	18e4      	addlt	r4, r4, r3
 800bb16:	f000 f8d3 	bl	800bcc0 <__malloc_lock>
 800bb1a:	4a20      	ldr	r2, [pc, #128]	; (800bb9c <_free_r+0x9c>)
 800bb1c:	9801      	ldr	r0, [sp, #4]
 800bb1e:	6813      	ldr	r3, [r2, #0]
 800bb20:	4615      	mov	r5, r2
 800bb22:	b933      	cbnz	r3, 800bb32 <_free_r+0x32>
 800bb24:	6063      	str	r3, [r4, #4]
 800bb26:	6014      	str	r4, [r2, #0]
 800bb28:	b003      	add	sp, #12
 800bb2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb2e:	f000 b8cd 	b.w	800bccc <__malloc_unlock>
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	d90b      	bls.n	800bb4e <_free_r+0x4e>
 800bb36:	6821      	ldr	r1, [r4, #0]
 800bb38:	1862      	adds	r2, r4, r1
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	bf04      	itt	eq
 800bb3e:	681a      	ldreq	r2, [r3, #0]
 800bb40:	685b      	ldreq	r3, [r3, #4]
 800bb42:	6063      	str	r3, [r4, #4]
 800bb44:	bf04      	itt	eq
 800bb46:	1852      	addeq	r2, r2, r1
 800bb48:	6022      	streq	r2, [r4, #0]
 800bb4a:	602c      	str	r4, [r5, #0]
 800bb4c:	e7ec      	b.n	800bb28 <_free_r+0x28>
 800bb4e:	461a      	mov	r2, r3
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	b10b      	cbz	r3, 800bb58 <_free_r+0x58>
 800bb54:	42a3      	cmp	r3, r4
 800bb56:	d9fa      	bls.n	800bb4e <_free_r+0x4e>
 800bb58:	6811      	ldr	r1, [r2, #0]
 800bb5a:	1855      	adds	r5, r2, r1
 800bb5c:	42a5      	cmp	r5, r4
 800bb5e:	d10b      	bne.n	800bb78 <_free_r+0x78>
 800bb60:	6824      	ldr	r4, [r4, #0]
 800bb62:	4421      	add	r1, r4
 800bb64:	1854      	adds	r4, r2, r1
 800bb66:	42a3      	cmp	r3, r4
 800bb68:	6011      	str	r1, [r2, #0]
 800bb6a:	d1dd      	bne.n	800bb28 <_free_r+0x28>
 800bb6c:	681c      	ldr	r4, [r3, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	6053      	str	r3, [r2, #4]
 800bb72:	4421      	add	r1, r4
 800bb74:	6011      	str	r1, [r2, #0]
 800bb76:	e7d7      	b.n	800bb28 <_free_r+0x28>
 800bb78:	d902      	bls.n	800bb80 <_free_r+0x80>
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	6003      	str	r3, [r0, #0]
 800bb7e:	e7d3      	b.n	800bb28 <_free_r+0x28>
 800bb80:	6825      	ldr	r5, [r4, #0]
 800bb82:	1961      	adds	r1, r4, r5
 800bb84:	428b      	cmp	r3, r1
 800bb86:	bf04      	itt	eq
 800bb88:	6819      	ldreq	r1, [r3, #0]
 800bb8a:	685b      	ldreq	r3, [r3, #4]
 800bb8c:	6063      	str	r3, [r4, #4]
 800bb8e:	bf04      	itt	eq
 800bb90:	1949      	addeq	r1, r1, r5
 800bb92:	6021      	streq	r1, [r4, #0]
 800bb94:	6054      	str	r4, [r2, #4]
 800bb96:	e7c7      	b.n	800bb28 <_free_r+0x28>
 800bb98:	b003      	add	sp, #12
 800bb9a:	bd30      	pop	{r4, r5, pc}
 800bb9c:	2000009c 	.word	0x2000009c

0800bba0 <_malloc_r>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	1ccd      	adds	r5, r1, #3
 800bba4:	f025 0503 	bic.w	r5, r5, #3
 800bba8:	3508      	adds	r5, #8
 800bbaa:	2d0c      	cmp	r5, #12
 800bbac:	bf38      	it	cc
 800bbae:	250c      	movcc	r5, #12
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	db01      	blt.n	800bbba <_malloc_r+0x1a>
 800bbb6:	42a9      	cmp	r1, r5
 800bbb8:	d903      	bls.n	800bbc2 <_malloc_r+0x22>
 800bbba:	230c      	movs	r3, #12
 800bbbc:	6033      	str	r3, [r6, #0]
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc2:	f000 f87d 	bl	800bcc0 <__malloc_lock>
 800bbc6:	4921      	ldr	r1, [pc, #132]	; (800bc4c <_malloc_r+0xac>)
 800bbc8:	680a      	ldr	r2, [r1, #0]
 800bbca:	4614      	mov	r4, r2
 800bbcc:	b99c      	cbnz	r4, 800bbf6 <_malloc_r+0x56>
 800bbce:	4f20      	ldr	r7, [pc, #128]	; (800bc50 <_malloc_r+0xb0>)
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	b923      	cbnz	r3, 800bbde <_malloc_r+0x3e>
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f000 f862 	bl	800bca0 <_sbrk_r>
 800bbdc:	6038      	str	r0, [r7, #0]
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f000 f85d 	bl	800bca0 <_sbrk_r>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	d123      	bne.n	800bc32 <_malloc_r+0x92>
 800bbea:	230c      	movs	r3, #12
 800bbec:	6033      	str	r3, [r6, #0]
 800bbee:	4630      	mov	r0, r6
 800bbf0:	f000 f86c 	bl	800bccc <__malloc_unlock>
 800bbf4:	e7e3      	b.n	800bbbe <_malloc_r+0x1e>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	1b5b      	subs	r3, r3, r5
 800bbfa:	d417      	bmi.n	800bc2c <_malloc_r+0x8c>
 800bbfc:	2b0b      	cmp	r3, #11
 800bbfe:	d903      	bls.n	800bc08 <_malloc_r+0x68>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	441c      	add	r4, r3
 800bc04:	6025      	str	r5, [r4, #0]
 800bc06:	e004      	b.n	800bc12 <_malloc_r+0x72>
 800bc08:	6863      	ldr	r3, [r4, #4]
 800bc0a:	42a2      	cmp	r2, r4
 800bc0c:	bf0c      	ite	eq
 800bc0e:	600b      	streq	r3, [r1, #0]
 800bc10:	6053      	strne	r3, [r2, #4]
 800bc12:	4630      	mov	r0, r6
 800bc14:	f000 f85a 	bl	800bccc <__malloc_unlock>
 800bc18:	f104 000b 	add.w	r0, r4, #11
 800bc1c:	1d23      	adds	r3, r4, #4
 800bc1e:	f020 0007 	bic.w	r0, r0, #7
 800bc22:	1ac2      	subs	r2, r0, r3
 800bc24:	d0cc      	beq.n	800bbc0 <_malloc_r+0x20>
 800bc26:	1a1b      	subs	r3, r3, r0
 800bc28:	50a3      	str	r3, [r4, r2]
 800bc2a:	e7c9      	b.n	800bbc0 <_malloc_r+0x20>
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	6864      	ldr	r4, [r4, #4]
 800bc30:	e7cc      	b.n	800bbcc <_malloc_r+0x2c>
 800bc32:	1cc4      	adds	r4, r0, #3
 800bc34:	f024 0403 	bic.w	r4, r4, #3
 800bc38:	42a0      	cmp	r0, r4
 800bc3a:	d0e3      	beq.n	800bc04 <_malloc_r+0x64>
 800bc3c:	1a21      	subs	r1, r4, r0
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f000 f82e 	bl	800bca0 <_sbrk_r>
 800bc44:	3001      	adds	r0, #1
 800bc46:	d1dd      	bne.n	800bc04 <_malloc_r+0x64>
 800bc48:	e7cf      	b.n	800bbea <_malloc_r+0x4a>
 800bc4a:	bf00      	nop
 800bc4c:	2000009c 	.word	0x2000009c
 800bc50:	200000a0 	.word	0x200000a0

0800bc54 <_realloc_r>:
 800bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc56:	4607      	mov	r7, r0
 800bc58:	4614      	mov	r4, r2
 800bc5a:	460e      	mov	r6, r1
 800bc5c:	b921      	cbnz	r1, 800bc68 <_realloc_r+0x14>
 800bc5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc62:	4611      	mov	r1, r2
 800bc64:	f7ff bf9c 	b.w	800bba0 <_malloc_r>
 800bc68:	b922      	cbnz	r2, 800bc74 <_realloc_r+0x20>
 800bc6a:	f7ff ff49 	bl	800bb00 <_free_r>
 800bc6e:	4625      	mov	r5, r4
 800bc70:	4628      	mov	r0, r5
 800bc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc74:	f000 f830 	bl	800bcd8 <_malloc_usable_size_r>
 800bc78:	42a0      	cmp	r0, r4
 800bc7a:	d20f      	bcs.n	800bc9c <_realloc_r+0x48>
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4638      	mov	r0, r7
 800bc80:	f7ff ff8e 	bl	800bba0 <_malloc_r>
 800bc84:	4605      	mov	r5, r0
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d0f2      	beq.n	800bc70 <_realloc_r+0x1c>
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	f7ff ff0f 	bl	800bab0 <memcpy>
 800bc92:	4631      	mov	r1, r6
 800bc94:	4638      	mov	r0, r7
 800bc96:	f7ff ff33 	bl	800bb00 <_free_r>
 800bc9a:	e7e9      	b.n	800bc70 <_realloc_r+0x1c>
 800bc9c:	4635      	mov	r5, r6
 800bc9e:	e7e7      	b.n	800bc70 <_realloc_r+0x1c>

0800bca0 <_sbrk_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4d06      	ldr	r5, [pc, #24]	; (800bcbc <_sbrk_r+0x1c>)
 800bca4:	2300      	movs	r3, #0
 800bca6:	4604      	mov	r4, r0
 800bca8:	4608      	mov	r0, r1
 800bcaa:	602b      	str	r3, [r5, #0]
 800bcac:	f7fd fbfe 	bl	80094ac <_sbrk>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d102      	bne.n	800bcba <_sbrk_r+0x1a>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	b103      	cbz	r3, 800bcba <_sbrk_r+0x1a>
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	bd38      	pop	{r3, r4, r5, pc}
 800bcbc:	20000264 	.word	0x20000264

0800bcc0 <__malloc_lock>:
 800bcc0:	4801      	ldr	r0, [pc, #4]	; (800bcc8 <__malloc_lock+0x8>)
 800bcc2:	f000 b811 	b.w	800bce8 <__retarget_lock_acquire_recursive>
 800bcc6:	bf00      	nop
 800bcc8:	2000026c 	.word	0x2000026c

0800bccc <__malloc_unlock>:
 800bccc:	4801      	ldr	r0, [pc, #4]	; (800bcd4 <__malloc_unlock+0x8>)
 800bcce:	f000 b80c 	b.w	800bcea <__retarget_lock_release_recursive>
 800bcd2:	bf00      	nop
 800bcd4:	2000026c 	.word	0x2000026c

0800bcd8 <_malloc_usable_size_r>:
 800bcd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcdc:	1f18      	subs	r0, r3, #4
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	bfbc      	itt	lt
 800bce2:	580b      	ldrlt	r3, [r1, r0]
 800bce4:	18c0      	addlt	r0, r0, r3
 800bce6:	4770      	bx	lr

0800bce8 <__retarget_lock_acquire_recursive>:
 800bce8:	4770      	bx	lr

0800bcea <__retarget_lock_release_recursive>:
 800bcea:	4770      	bx	lr

0800bcec <_init>:
 800bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcee:	bf00      	nop
 800bcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf2:	bc08      	pop	{r3}
 800bcf4:	469e      	mov	lr, r3
 800bcf6:	4770      	bx	lr

0800bcf8 <_fini>:
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	bf00      	nop
 800bcfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcfe:	bc08      	pop	{r3}
 800bd00:	469e      	mov	lr, r3
 800bd02:	4770      	bx	lr
